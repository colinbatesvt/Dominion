{"version":3,"sources":["webpack:///Common/src/CardDefinitions/Moat.ts","webpack:///Common/src/CardDefinitions/Remodel.ts","webpack:///Common/src/CardDefinitions/cellar.ts","webpack:///Common/src/CardDefinitions/copper.ts","webpack:///Common/src/CardDefinitions/curse.ts","webpack:///Common/src/CardDefinitions/duchy.ts","webpack:///Common/src/CardDefinitions/estate.ts","webpack:///Common/src/CardDefinitions/gold.ts","webpack:///Common/src/CardDefinitions/market.ts","webpack:///Common/src/CardDefinitions/militia.ts","webpack:///Common/src/CardDefinitions/mine.ts","webpack:///Common/src/CardDefinitions/province.ts","webpack:///Common/src/CardDefinitions/silver.ts","webpack:///Common/src/CardDefinitions/smithy.ts","webpack:///Common/src/CardDefinitions/village.ts","webpack:///Common/src/CardDefinitions/woodcutter.ts","webpack:///Common/src/CardDefinitions/workshop.ts","webpack:///Common/src/action-card-definition.ts","webpack:///Common/src/card-definition.ts","webpack:///Common/src/card-library.ts","webpack:///Common/src/game.ts","webpack:///Common/src/player.ts","webpack:///Common/src/treasure-card-definition.ts","webpack:///Common/src/victory-card-definition.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/banner/banner.component.ts","webpack:///src/app/banner/banner.component.html","webpack:///src/app/card-pile/card-pile.component.ts","webpack:///src/app/card-pile/card-pile.component.html","webpack:///src/app/card/card.component.ts","webpack:///src/app/card/card.component.html","webpack:///src/app/game-over/game-over.component.ts","webpack:///src/app/game-over/game-over.component.html","webpack:///src/app/game.service.ts","webpack:///src/app/join-game/join-game.component.ts","webpack:///src/app/join-game/join-game.component.html","webpack:///src/app/play-game/play-game.component.ts","webpack:///src/app/play-game/play-game.component.html","webpack:///src/app/player/player.component.ts","webpack:///src/app/player/player.component.html","webpack:///src/app/setup-game/setup-game.component.ts","webpack:///src/app/setup-game/setup-game.component.html","webpack:///src/app/shop/shop.component.ts","webpack:///src/app/shop/shop.component.html","webpack:///src/app/status.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["Moat","cost","subType","reaction","imageName","game","player","draw","finishExecution","cardName","Remodel","handPick","hand","length","selection","trash","location","isValid","card","count","push","pushSelection","status","cards","trashCard","handIndex","i","handCard","id","splice","popSelection","library","maxBuy","getCardDefinition","name","gain","shop","gainCard","discard","Cellar","actions","pickDiscard","selections","prompts","pushPrompt","prompt","bAllFound","bFound","discardCard","popPrompt","Copper","coinValue","startingAmount","isKingdom","Curse","Duchy","Estate","Gold","Market","buys","coins","Militia","attack","playersDone","players","attackedPlayer","bImmune","revealedToOthers","bAllDone","done","valid","found","index","currentPlayer","Mine","type","treasure","Province","Silver","Smithy","Village","Woodcutter","Workshop","SubType","ActionCardDefinition","none","cardType","action","CardType","CardDefinition","GetImageName","constructor","CardLibrary","nextCardId","cardIndex","presetIndex","getCard","undefined","getCardName","Object","keys","preset","GameState","Game","gameName","serverCallback","state","Setup","setupSelectedCards","setupPreset","executingCards","newState","remove","indexOf","noActivePlayers","humanPlayer","connected","socketId","playerName","playerColor","SetConnected","console","log","color","newPlayer","playerIndex","botName","letters","Math","floor","random","presetName","presetCardNames","getPresetCardNames","findPlayerByName","setupReady","basicCards","getBasicCardNames","basicCard","definition","newCard","kingdomCard","estate","pop","deck","shuffle","setGameState","PlayGame","unshift","waitingForPlayer","WaitingForTurn","setState","Action","Buy","CleanUp","cleanUp","addStateActions","userSelections","gameOver","empty","validSelection","currentSelections","allCardsValid","onSelection","cardDefinition","inPlay","execute","treasureCardDefinition","checkGameOver","GameOver","onPrompt","advanceGame","finishing","current","Location","PlayerState","Player","revealed","userPrompts","drawCount","j","actionPhaseSelections","pickAction","buyPhaseSelections","pickTreasure","pickShop","AIPlayer","ai","doCurrentSelection","popped","HumanPlayer","ms","start","Date","getTime","end","wait","currentSelection","onCardsSelected","TreasureCardDefinition","getCoinValue","VictoryCardDefinition","victory","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","module","exports","AppComponent","gameService","title","viewedCard","viewedPile","onGameChanged","subscribe","onViewedCardChanged","onViewedPileChanged","setViewedCard","setViewedPile","selector","templateUrl","styleUrls","config","url","options","AppModule","forRoot","declarations","imports","providers","bootstrap","BannerComponent","imgSrc","CardPileComponent","showLocationLabel","hovered","orientation","onClick","CardComponent","selected","highlighted","onCardSelected","GameOverComponent","orderedPlayers","winner","getGame","cardLibrary","playerPoints","victoryCardDefinition","GetVictoryPoints","inserted","leaveGame","onLeaveGame","GameService","socket","statusService","gameSubject","asObservable","onGamesUpdated","create","observer","on","games","next","viewedCardSubject","viewedPileSubject","selectedCards","updateStatus","event","data","returnCallback","emit","result","ok","returnValue","setStatus","error","myPlayerName","myPlayerColor","myGameName","sendToServer","newPlayerName","newPlayerColor","newGameName","joinGame","myBotName","selectedPreset","clickedPrompt","setupSelectCard","selectedCard","pickingFromShop","providedIn","JoinGameComponent","cookieService","gameNames","playerCounts","get","onStatusChanged","newStatus","requestGames","set","createGame","onCreate","PlayGameComponent","myPlayer","getPlayer","initPlayers","getStatus","onPromptClicked","anyActions","topPlayer","leftPlayer","rightPlayer","PlayerComponent","isCardSelected","isCardHighlighted","SetupGameComponent","kingdomCards","getCards","presets","getPresetNames","getAllCards","setupSelectPreset","setupStartGame","canStart","onReady","onStart","selectPreset","ShopComponent","initShopPiles","item","StatusService","statusSubject","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { ActionCardDefinition, SubType } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Moat extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"moat\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 2;\r\n        this.subType = SubType.reaction;\r\n        this.imageName = \"moat.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 2 cards\r\n        player.draw(2);\r\n        // when another player plays an attack card you may first reveal this from your hand, to be unaffected by it.\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { Card } from \"../card\";\r\nimport { CardType } from \"../card-definition\";\r\nimport { CardLibrary } from \"../card-library\";\r\n\r\nexport class Remodel extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"remodel\";\r\n    private handPick: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 4;\r\n        this.imageName = \"remodel.jpg\";\r\n        this,this.handPick = true;\r\n    }\r\n\r\n    public execute(game: Game, player: Player) \r\n    {\r\n        // Trash a card from your hand gain a card costing up to 2 more than it\r\n        if(player.hand.length > 0)\r\n        {\r\n            const selection: UserSelection[] = [];\r\n            const trash: UserSelection = {location: Location.hand, isValid: (card: Card) => {return true;}, count: 1}\r\n            selection.push(trash)\r\n            player.pushSelection(selection, game);\r\n            player.status = \"Choose a card from your hand to trash\";\r\n            this.handPick = true;\r\n        }\r\n        else \r\n        {\r\n            game.finishExecution(this);\r\n        }\r\n    }\r\n\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        //if this is the trash selection...\r\n        if(this.handPick === true)\r\n        {\r\n            //selection should be a single card\r\n            const trashCard: Card = cards[0];\r\n            let handIndex = -1;\r\n            for(let i = 0; i < player.hand.length; i++)\r\n            {\r\n                const handCard: Card = player.hand[i];\r\n                if(handCard.id === trashCard.id)\r\n                {\r\n                    handIndex = i;\r\n                }\r\n            }\r\n            if(handIndex !== -1)\r\n            {\r\n                player.hand.splice(handIndex, 1);\r\n                game.trashCard(trashCard);\r\n                //remove this selection, add gain selection\r\n                player.popSelection();\r\n                const library: CardLibrary = new CardLibrary;\r\n                const maxBuy: Number = library.getCardDefinition(trashCard.name).cost + 2;\r\n                player.status = \"Gain a card from the shop costing up to \" + maxBuy;\r\n                const selection: UserSelection[] = [];\r\n                const gain: UserSelection = {location: Location.shop, isValid: (card: Card) => {\r\n                    return library.getCardDefinition(card.name).cost <= maxBuy;\r\n                }, count: 1}\r\n                selection.push(gain)\r\n                player.pushSelection(selection, game);\r\n                this.handPick = false;\r\n            }\r\n            else \r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else \r\n        {\r\n            //selection should be a single card\r\n            const gainCard: Card = cards[0];\r\n            //verify it's a card on top of it's shop pile\r\n            if(game.shop[gainCard.name][0].id === gainCard.id)\r\n            {\r\n                player.gain(Location.discard, gainCard);\r\n                game.shop[gainCard.name].splice(0, 1);\r\n                player.popSelection();\r\n                player.status = \"\";\r\n                game.finishExecution(this);\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, Location, UserSelection } from \"../player\";\r\nimport { CardType } from \"../card-definition\";\r\nimport { Card } from \"../card\";\r\n\r\nexport class Cellar extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"cellar\";\r\n    \r\n    public constructor() {\r\n        super();\r\n        this.cost = 2;\r\n        this.imageName = \"cellar.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 1 action\r\n        player.actions++;\r\n\r\n        //discard any number of cards, then draw that many\r\n        const pickDiscard: UserSelection = {location: Location.hand, isValid: (card: Card) => {return true;}, count: -1};\r\n        let selections: UserSelection[] = [];\r\n        selections.push(pickDiscard);\r\n\r\n        const prompts: string[] = [\"discard\"];\r\n        player.pushPrompt(prompts);\r\n        player.pushSelection(selections, game);\r\n        player.status = \"Choose any number of cards to discard\";\r\n    }\r\n\r\n    public onPrompt(prompt: string, game: Game, player: Player, cards: Card[]) : boolean\r\n    {\r\n        if(prompt === \"discard\")\r\n        {\r\n            // verify all these cards are actual cards in the user's hand\r\n            let bAllFound = true;\r\n            for(const card of cards)\r\n            {\r\n                let bFound = false;\r\n                for(const handCard of player.hand)\r\n                {\r\n                    if(card.id === handCard.id)\r\n                    {\r\n                        bFound = true;\r\n                    }\r\n                }\r\n                if(bFound !== true)\r\n                    bAllFound = false;\r\n            }\r\n\r\n            if(bAllFound !== true)\r\n            {\r\n                return false;\r\n            }\r\n            else\r\n            {\r\n                for(const card of cards)\r\n                {\r\n                    player.discardCard(card);\r\n                }\r\n\r\n                player.draw(cards.length);    \r\n                player.popSelection();\r\n                player.popPrompt();\r\n                game.finishExecution(this);\r\n                player.status = \"\";\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","import { TreasureCardDefinition } from \"../treasure-card-definition\";\r\n\r\nexport class Copper extends TreasureCardDefinition\r\n{\r\n    public static cardName: string = \"copper\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.coinValue = 1;\r\n        this.cost = 0;\r\n        this.startingAmount = 60;\r\n        this.isKingdom = false;\r\n        this.imageName = \"copper.jpg\";\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Curse extends VictoryCardDefinition\r\n{\r\n    public static cardName: string = \"curse\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 0; // Wow, this card is free? It must be the best!\r\n        this.startingAmount = 30;\r\n        this.isKingdom = false;\r\n        this.imageName = \"curse.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return -1;\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Duchy extends VictoryCardDefinition\r\n{\r\n    public static cardName: string = \"duchy\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 5;\r\n        this.startingAmount = 12;\r\n        this.isKingdom = false;\r\n        this.imageName = \"duchy.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return 3;\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Estate extends VictoryCardDefinition\r\n{\r\n\r\n    public static cardName: string = \"estate\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 2;\r\n        this.startingAmount = 24;\r\n        this.isKingdom = false;\r\n        this.imageName = \"estate.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return 1;\r\n    }\r\n}","import { TreasureCardDefinition } from \"../treasure-card-definition\";\r\n\r\nexport class Gold extends TreasureCardDefinition\r\n{\r\n    public static cardName: string = \"gold\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.coinValue = 3;\r\n        this.cost = 6;\r\n        this.startingAmount = 30;\r\n        this.isKingdom = false;\r\n        this.imageName = \"gold.jpg\";\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Market extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"market\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.isKingdom = true;\r\n        this.imageName = \"market.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        player.draw(1);\r\n        player.actions++;\r\n        player.buys++;\r\n        player.coins++;\r\n\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition, SubType } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { CardType } from \"../card-definition\";\r\nimport { Card } from \"../card\";\r\n\r\nexport class Militia extends ActionCardDefinition\r\n{\r\n    \r\n    public static cardName: string = \"militia\";\r\n    private playersDone: boolean[]; // used to track if users have discarded their cards\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 4;\r\n        this.subType = SubType.attack;\r\n        this.imageName = \"militia.jpg\";\r\n        this.playersDone = [];\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        player.coins += 2;\r\n        \r\n        this.playersDone = [];\r\n\r\n        //each other player discards down to 3 cards in hand\r\n        for(const attackedPlayer of game.players)\r\n        {\r\n            if(attackedPlayer.name !== player.name)\r\n            {\r\n                let bImmune = false;\r\n                for(const card of attackedPlayer.hand)\r\n                {\r\n                    // moat immunity, this should probably be a little more generic for futre reactions, but ya know...\r\n                    if(card.name === \"moat\")\r\n                    {\r\n                        bImmune = true;\r\n                        card.revealedToOthers = true;\r\n                    }\r\n                }\r\n                //immune, don't wait for their response\r\n                if(bImmune === true)\r\n                {\r\n                    this.playersDone.push(true);\r\n                }\r\n                else\r\n                {\r\n                    //not immune, but make sure they have more than three cards to discard\r\n                    if(attackedPlayer.hand.length > 3)\r\n                    {\r\n                        this.playersDone.push(false);\r\n                        const selection: UserSelection[] = [];\r\n                        const discard: UserSelection = {location: Location.hand, isValid: (card: Card) => {return true;}, count: attackedPlayer.hand.length - 3}\r\n                        selection.push(discard)\r\n                        attackedPlayer.pushSelection(selection, game);\r\n                        attackedPlayer.status = \"Discard down to 3 cards.\" \r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.playersDone.push(true);\r\n            }\r\n        }\r\n\r\n        let bAllDone = true;\r\n        for(const done of this.playersDone)\r\n        {\r\n            if(done === false)\r\n            {\r\n                bAllDone = false;\r\n            }\r\n        }\r\n\r\n        //no one to attack, clean up\r\n        if(bAllDone)\r\n            game.finishExecution(this);\r\n        else\r\n            player.status = \"Waiting for other players to discard\";\r\n    }\r\n    \r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        //make sure everything in the selection is in that players hand\r\n        let valid = true;\r\n        for(const card of cards)\r\n        {\r\n            let found = false;\r\n            for (const handCard of player.hand)\r\n            {\r\n                if(card.id === handCard.id)\r\n                {\r\n                    found = true;\r\n                }\r\n            }\r\n            if(found === false)\r\n            {\r\n                valid = false;\r\n            }\r\n        }\r\n\r\n        //if the selection was valid, discard the selected cards\r\n        if(valid === false)\r\n            return false;\r\n        else\r\n        {\r\n            for(const card of cards)\r\n            {\r\n                player.discardCard(card);\r\n            }\r\n        }\r\n\r\n        this.playersDone[player.index] = true;\r\n        player.popSelection();\r\n        player.status = \"\";\r\n\r\n        //see if everyone has discarded, and if they have, clean up\r\n        let bAllDone = true;\r\n        for(const done of this.playersDone)\r\n        {\r\n            if(done === false)\r\n            {\r\n                bAllDone = false;\r\n            }\r\n        }\r\n\r\n        if(bAllDone)\r\n        {\r\n            game.finishExecution(this);\r\n            game.players[game.currentPlayer].status = \"\";\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { Card } from \"../card\";\r\nimport { CardLibrary } from \"../card-library\";\r\nimport { CardType } from \"../card-definition\";\r\n\r\nexport class Mine extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"mine\";\r\n    private handPick: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 5;\r\n        this.imageName = \"mine.jpg\";\r\n        this.handPick = true;\r\n    }\r\n\r\n    public execute(game: Game, player: Player) \r\n    {\r\n        //you may trash a treasure from your hand. Gain a Treasure to your hand costing up to 3 more than it\r\n        //check if they have a treasure card to discard\r\n        let valid = false;\r\n        for(const card of player.hand)\r\n        {\r\n            if(card.type === CardType.treasure)\r\n                valid = true;\r\n        }\r\n        if(valid === true)\r\n        {\r\n            const selection: UserSelection[] = [];\r\n            const trash: UserSelection = {location: Location.hand, isValid: (card: Card) => {return card.type === CardType.treasure;}, count: 1}\r\n            selection.push(trash)\r\n            player.pushSelection(selection, game);\r\n            this.handPick = true;\r\n            player.status = \"Choose a treasure card from your hand to trash\"\r\n        }\r\n    }\r\n\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        //if this is the trash selection...\r\n        if(this.handPick === true)\r\n        {\r\n            //selection should be a single card\r\n            const trashCard: Card = cards[0];\r\n            let handIndex = -1;\r\n            for(let i = 0; i < player.hand.length; i++)\r\n            {\r\n                const handCard: Card = player.hand[i];\r\n                if(handCard.id === trashCard.id)\r\n                {\r\n                    handIndex = i;\r\n                }\r\n            }\r\n            if(handIndex !== -1)\r\n            {\r\n                player.hand.splice(handIndex, 1);\r\n                game.trashCard(trashCard);\r\n                //remove this selection, add gain selection\r\n                player.popSelection();\r\n\r\n                const selection: UserSelection[] = [];\r\n                const library: CardLibrary = new CardLibrary;\r\n                const maxBuy: Number = library.getCardDefinition(trashCard.name).cost + 3;\r\n                const gain: UserSelection = {location: Location.shop, isValid: (card: Card) => {\r\n                    return library.getCardDefinition(card.name).cost <= maxBuy;\r\n                }, count: 1}\r\n                selection.push(gain)\r\n                player.pushSelection(selection, game);\r\n                this.handPick = false;\r\n                player.status = \"Gain a treasure card costing up to \" + maxBuy;\r\n            }\r\n            else \r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else \r\n        {\r\n            //selection should be a single card\r\n            const gainCard: Card = cards[0];\r\n            //verify it's a card on top of it's shop pile\r\n            if(game.shop[gainCard.name][0].id === gainCard.id)\r\n            {\r\n                player.gain(Location.discard, gainCard);\r\n                game.shop[gainCard.name].splice(0, 1);\r\n                player.popSelection();\r\n                game.finishExecution(this);\r\n                player.status = \"\";\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Province extends VictoryCardDefinition\r\n{\r\n\r\n    public static cardName: string = \"province\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 8;\r\n        this.startingAmount = 12;\r\n        this.isKingdom = false;\r\n        this.imageName = \"province.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return 6;\r\n    }\r\n}","import { TreasureCardDefinition } from \"../treasure-card-definition\";\r\n\r\nexport class Silver extends TreasureCardDefinition\r\n{\r\n    public static cardName: string = \"silver\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.coinValue = 2;\r\n        this.cost = 3;\r\n        this.startingAmount = 40;\r\n        this.isKingdom = false;\r\n        this.imageName = \"silver.jpg\";\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Smithy extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"smithy\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 4;\r\n        this.imageName = \"smithy.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 3 cards\r\n        player.draw(3);\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Village extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"village\";\r\n    public constructor() {\r\n        super();\r\n        this.cost = 3;\r\n        this.imageName = \"village.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 1 card\r\n        player.draw(1);\r\n        // + 2 actions\r\n        player.actions += 2;\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Woodcutter extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"woodcutter\";\r\n    public constructor() {\r\n        super();\r\n        this.cost = 3;\r\n        this.imageName = \"woodcutter.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 1 buy\r\n        player.buys++;\r\n        // + 2 coins\r\n        player.coins += 2;\r\n\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { Card } from \"../card\";\r\nimport { CardLibrary } from \"../card-library\";\r\n\r\nexport class Workshop extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"workshop\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 3;\r\n        this.imageName = \"workshop.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // gain a card costing up to 4\r\n\r\n        const selection: UserSelection[] = [];\r\n        const gain: UserSelection = {location: Location.shop, isValid: (card: Card) => {\r\n            const library: CardLibrary = new CardLibrary;\r\n            return library.getCardDefinition(card.name).cost <= 4;\r\n        }, count: 1}\r\n        selection.push(gain)\r\n        player.pushSelection(selection, game);\r\n        player.status = \"Gain a card costing up to 4\";\r\n    }\r\n\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        const gainCard: Card = cards[0];\r\n\r\n        if(game.shop[gainCard.name][0].id === gainCard.id)\r\n        {\r\n            player.gain(Location.discard, gainCard);\r\n            game.shop[gainCard.name].splice(0, 1);\r\n            player.popSelection();\r\n            game.finishExecution(this);\r\n            player.status = \"\";\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { CardDefinition, CardType } from \"./card-definition\";\r\n\r\nexport enum SubType {\r\n    none = 'none',\r\n    attack = 'attack',\r\n    reaction = 'reaction'\r\n}\r\n\r\nexport abstract class ActionCardDefinition extends CardDefinition {\r\n\r\n    public subType: SubType;\r\n\r\n    constructor() {\r\n        super();\r\n        this.isKingdom = true;\r\n        this.subType = SubType.none;\r\n        this.startingAmount = 10;\r\n        this.cardType = CardType.action;\r\n    }\r\n}","import { Card } from \"./card\";\r\nimport { Player } from \"./player\";\r\nimport { Game } from \"./game\";\r\n\r\nexport enum CardType {\r\n    any = 0,\r\n    action,\r\n    victory,\r\n    treasure\r\n};\r\n\r\nexport abstract class CardDefinition{\r\n\r\n    public static cardName: string;\r\n\r\n    imageName : string = \"\";\r\n    cost: number;\r\n    startingAmount: number;\r\n    isKingdom: boolean;\r\n    cardType: CardType;\r\n\r\n    constructor() {\r\n        this.cost = 0;\r\n        this.startingAmount = 0;\r\n        this.isKingdom = true;\r\n        this.cardType = CardType.action;\r\n    }\r\n\r\n    public getCard(id: number): Card{\r\n        const card: Card = {\r\n            id: id,\r\n            imageName: this.GetImageName(),\r\n            name: (<typeof CardDefinition> this.constructor).cardName, //yuck, but this is the only way as far as I can tell\r\n            isKingdom: this.isKingdom,\r\n            type: this.cardType,\r\n            revealedToOthers: false\r\n        };\r\n        \r\n        return card;\r\n    }\r\n\r\n    public getCardName(): string{\r\n        return (<typeof CardDefinition> this.constructor).cardName\r\n    }\r\n\r\n    public GetImageName() : string {\r\n        return this.imageName;\r\n    }\r\n\r\n    //execute the card's behaviour, this should be overriden by concrete subclasses that have behaviour on the card being played\r\n    public execute(game: Game, player: Player) {\r\n\r\n    }\r\n\r\n    //for cards that require the user to select something, they can override this\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n        return true;\r\n    }\r\n\r\n    public onPrompt(prompt: string, game: Game, player: Player, cards: Card[]) : boolean{\r\n        return true;\r\n    }\r\n}","import { CardDefinition } from \"./card-definition\";\r\nimport { Copper } from \"./CardDefinitions/copper\";\r\nimport { Card } from \"./card\";\r\nimport { Silver } from \"./CardDefinitions/silver\";\r\nimport { Gold } from \"./CardDefinitions/gold\";\r\nimport { Estate } from \"./CardDefinitions/estate\";\r\nimport { Duchy } from \"./CardDefinitions/duchy\";\r\nimport { Province } from \"./CardDefinitions/province\";\r\nimport { Curse } from \"./CardDefinitions/curse\";\r\nimport { Cellar } from \"./CardDefinitions/cellar\";\r\nimport { Workshop } from \"./CardDefinitions/workshop\";\r\nimport { Market } from \"./CardDefinitions/market\";\r\nimport { Militia } from \"./CardDefinitions/militia\";\r\nimport { Mine } from \"./CardDefinitions/mine\";\r\nimport { Moat } from \"./CardDefinitions/Moat\";\r\nimport { Remodel } from \"./CardDefinitions/Remodel\";\r\nimport { Smithy } from \"./CardDefinitions/smithy\";\r\nimport { Village } from \"./CardDefinitions/village\";\r\nimport { Woodcutter } from \"./CardDefinitions/woodcutter\";\r\n\r\nexport class CardLibrary {\r\n\r\n    private cardIndex: Record<string, CardDefinition>; //map of card names to card definitions\r\n    private nextCardId: number;\r\n    private presetIndex: Record<string, string[]>; // map of preset names to card names in that preset\r\n\r\n    constructor() {\r\n        this.nextCardId = 0;\r\n\r\n        this.cardIndex = {};\r\n        // basic cards\r\n        this.cardIndex[Copper.cardName] = new Copper();\r\n        this.cardIndex[Silver.cardName] = new Silver();\r\n        this.cardIndex[Gold.cardName] = new Gold();\r\n        this.cardIndex[Estate.cardName] = new Estate();\r\n        this.cardIndex[Duchy.cardName] = new Duchy();\r\n        this.cardIndex[Province.cardName] = new Province();\r\n        this.cardIndex[Curse.cardName] = new Curse();\r\n\r\n        // actions\r\n        this.cardIndex[Cellar.cardName] = new Cellar();\r\n        this.cardIndex[Market.cardName] = new Market();\r\n        this.cardIndex[Militia.cardName] = new Militia();\r\n        this.cardIndex[Mine.cardName] = new Mine();\r\n        this.cardIndex[Moat.cardName] = new Moat();\r\n        this.cardIndex[Remodel.cardName] = new Remodel();\r\n        this.cardIndex[Smithy.cardName] = new Smithy();\r\n        this.cardIndex[Village.cardName] = new Village();\r\n        this.cardIndex[Woodcutter.cardName] = new Woodcutter();\r\n        this.cardIndex[Workshop.cardName] = new Workshop();\r\n\r\n        // presets\r\n        this.presetIndex = {};\r\n        this.presetIndex['First Game'] = [\r\n            Cellar.cardName,\r\n            Market.cardName,\r\n            Militia.cardName,\r\n            Mine.cardName,\r\n            Moat.cardName,\r\n            Remodel.cardName,\r\n            Smithy.cardName,\r\n            Village.cardName,\r\n            Woodcutter.cardName,\r\n            Workshop.cardName];\r\n    }\r\n\r\n    public getAllCards() : Card[]\r\n    {\r\n       const cards: Card[] = [];\r\n       for(let card in this.cardIndex)\r\n       {\r\n           cards.push(this.cardIndex[card].getCard(this.nextCardId))\r\n           this.nextCardId++;\r\n       }\r\n\r\n       return cards;\r\n    }\r\n\r\n    public getCard(cardName: string): Card | null {\r\n        if(this.cardIndex[cardName] !== undefined)\r\n        {\r\n            const card: Card = this.cardIndex[cardName].getCard(this.nextCardId);\r\n            this.nextCardId++;\r\n            return card;\r\n        }\r\n        else\r\n            return null;\r\n    }\r\n\r\n    public getCardDefinition(cardName: string) {\r\n        return this.cardIndex[cardName];\r\n    }\r\n\r\n    public getBasicCardNames() : string[]\r\n    {\r\n       const cards: string[] = [];\r\n       for(let card in this.cardIndex)\r\n       {\r\n           if (!this.cardIndex[card].isKingdom)\r\n           {\r\n                cards.push(this.cardIndex[card].getCardName());\r\n           }\r\n       }\r\n\r\n       return cards;\r\n    }\r\n\r\n    public getPresetNames(): string[]\r\n    {\r\n        return Object.keys(this.presetIndex);\r\n    }\r\n\r\n    public getPresetCardNames(preset: string) : string[]\r\n    {\r\n        return this.presetIndex[preset];\r\n    }\r\n}","import { Player, Location, PlayerState, HumanPlayer, AIPlayer, UserSelection } from \"./player\";\r\nimport { Card } from \"./card\";\r\nimport { CardLibrary } from \"./card-library\";\r\nimport { CardDefinition, CardType } from \"./card-definition\";\r\nimport { Estate } from \"./CardDefinitions/estate\";\r\nimport { Copper } from \"./CardDefinitions/copper\";\r\nimport { ServerInterface } from \"./server-interface\";\r\nimport { Province } from \"./CardDefinitions/province\";\r\n\r\nexport enum GameState {\r\n    Setup = 'setup',\r\n    PlayGame = 'play',\r\n    GameOver = 'over'\r\n};\r\n\r\nexport class Game {\r\n    public state: GameState;\r\n    public name: string;\r\n    public players: Player[];\r\n    public currentPlayer: number;\r\n    public shop: Record<string, Card[]>;\r\n    public trash: Card[];\r\n\r\n    public setupSelectedCards: string[];\r\n    public setupPreset: string;\r\n\r\n    public library: CardLibrary;\r\n    public executingCards: CardDefinition[];\r\n\r\n    constructor(gameName: string, serverCallback: (game: Game) => void) {\r\n        this.name = gameName;\r\n        this.state = GameState.Setup;\r\n        this.players = [];\r\n        this.currentPlayer = -1;\r\n        this.shop = {};\r\n        this.trash = [];\r\n\r\n        this.setupSelectedCards = [];\r\n        this.setupPreset = '';\r\n\r\n        this.library = new CardLibrary;\r\n        this.executingCards = [];\r\n    }\r\n\r\n    public setGameState(newState: GameState)\r\n    {\r\n        this.state = newState;\r\n    }\r\n\r\n    public removePlayer(remove: Player)\r\n    {\r\n        const index: number = this.players.indexOf(remove);\r\n        this.players.splice(index, 1);\r\n    }\r\n\r\n    // does this game have any active players\r\n    public hasNoActivePlayers() : boolean {\r\n       let noActivePlayers: boolean = true;\r\n       for(const player of this.players)\r\n       {\r\n           if(player instanceof HumanPlayer)\r\n           {\r\n               const humanPlayer: HumanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.connected)\r\n                    noActivePlayers = false;\r\n           }\r\n       }\r\n       return noActivePlayers;\r\n    }\r\n\r\n    public findPlayerById(socketId: any) : Player | undefined\r\n    {\r\n        for (const player of this.players)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer: HumanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.socketId === socketId)\r\n                    return player;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public findPlayerByName(playerName: string) : Player | undefined\r\n    {\r\n        for (const player of this.players)\r\n        {\r\n            if(player.name === playerName)\r\n                return player;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    //returns an error message or blank string on success\r\n    public playerJoin(playerName: string, playerColor: string, socketId : any) : string {\r\n        \r\n          // check for reconnect\r\n        for(const player of this.players)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.name === playerName)\r\n                {\r\n                    if(humanPlayer.connected !== true)\r\n                    {\r\n                        humanPlayer.socketId = socketId;\r\n                        humanPlayer.SetConnected(true);\r\n                        console.log(humanPlayer.name + ' reconnected. Socket ID = ' + socketId);\r\n                        return \"\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        //game better not be already going\r\n        if(this.state !== GameState.Setup)\r\n        {\r\n            return \"Unable to join game, game is already in progress\";\r\n        }\r\n\r\n        //only 4 players  in dominion\r\n        if(this.players.length >= 4)\r\n        {\r\n              return \"Unable to join game, player limit reached\";\r\n        }\r\n        \r\n        for(const player of this.players)\r\n        {\r\n            //player names have to be unique\r\n            if(player.name === playerName)\r\n            {\r\n                return \"There is already a player in the selected game with that name\";\r\n            }\r\n            \r\n            // player colors have to be unique\r\n            if(player.color === playerColor)\r\n            {\r\n               return \"There is already a player in the selected game with that favorite color\";\r\n            }\r\n        }\r\n\r\n        //we got past all the checks, let the new guy in\r\n        let newPlayer: HumanPlayer = new HumanPlayer(playerName, playerColor, socketId, this.players.length);\r\n        this.players.push(newPlayer);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public playerLeave(playerIndex: number) : string\r\n    {\r\n        if(playerIndex < this.players.length)\r\n        {\r\n            this.players.splice(playerIndex, 1);\r\n        }\r\n        else{\r\n            return \"invalid index\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    //returns an error message or blank string on success\r\n    public addBot(botName: string) : string\r\n    {\r\n        //disable bots for now, getting this to work with socketio is going to be complicated\r\n        return \"\";\r\n        /*\r\n        const foundPlayer: Player | undefined = this.findPlayerByName(botName);\r\n\r\n        //name needs to be unique\r\n        if(foundPlayer !== undefined)\r\n        {\r\n           return \"there is already a player in the game with that name\";\r\n        }\r\n\r\n        //game better not be already going\r\n        if(this.state !== GameState.Setup)\r\n        {\r\n            return \"Unable to join game, game is already in progress\";\r\n        }\r\n\r\n        //only 4 players  in dominion\r\n        if(this.players.length >= 4)\r\n        {\r\n            return \"Unable to join game, player limit reached\";\r\n        }\r\n\r\n        let bColorTaken = true;\r\n        let color: string = \"\";\r\n        while(bColorTaken)\r\n        {  \r\n            color = this.getRandomColor();\r\n            for(const player of this.players)\r\n            {\r\n                // color is taken, find a different one\r\n                if(player.color === color)\r\n                    continue;\r\n            }\r\n            bColorTaken = false;\r\n        }\r\n\r\n        const bot: AIPlayer = new AIPlayer(botName, color, this.players.length, this);\r\n        this.players.push(bot);\r\n        console.log(\"added bot: \" + botName);\r\n        return \"\";\r\n        */\r\n    }\r\n\r\n    public getRandomColor() : string{\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n      }\r\n\r\n    // keep track of which cards are selected during the setup step\r\n    public setupSelectCard(cardName: string)\r\n    {\r\n        // select a card, or deselect it if it's already selected\r\n\r\n        const index: number = this.setupSelectedCards.indexOf(cardName);\r\n        if(index == -1)\r\n        {\r\n            // only 10 kingdom cards can be selected at a time\r\n            if(this.setupSelectedCards.length < 10 )\r\n            {\r\n                this.setupSelectedCards.push(cardName);\r\n                \r\n                // once you change the selected cards, that preset is no longer selected\r\n                this.setupPreset = '';\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.setupSelectedCards.splice(index, 1);\r\n\r\n            // once you change the selected cards, that preset is no longer selected\r\n            this.setupPreset = '';\r\n        }\r\n    }\r\n\r\n    public setupSelectPreset(presetName: string) : boolean\r\n    {\r\n        const presetCardNames: string[] = this.library.getPresetCardNames(presetName);\r\n        if(presetCardNames !== undefined)\r\n        {\r\n            this.setupPreset = presetName;\r\n            this.setupSelectedCards = [];\r\n            for(const cardName of presetCardNames)\r\n            {\r\n                this.setupSelectedCards.push(cardName);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // toggle whether the player is ready or not\r\n    public setupPlayerReady(playerName: string) : boolean {\r\n        const player: Player | undefined = this.findPlayerByName(playerName);\r\n    \r\n        if(player !== undefined)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer : HumanPlayer = player as HumanPlayer;\r\n                humanPlayer.setupReady = !player.setupReady;\r\n            }\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n    public setupStartGame() : boolean {\r\n\r\n        // all humasn players must be ready\r\n        for(const player of this.players)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer : HumanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.setupReady === false)\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        // we need 10 kingdom cards\r\n        if(this.setupSelectedCards.length !== 10)\r\n            return false;\r\n\r\n        // time to setup the game!\r\n        // distribute cards to the shop\r\n        const basicCards: string[] = this.library.getBasicCardNames();\r\n\r\n        for(const basicCard of basicCards)\r\n        {\r\n            this.shop[basicCard] = [];\r\n            const definition : CardDefinition = this.library.getCardDefinition(basicCard);\r\n            for (let i = 0; i < definition.startingAmount; i++) \r\n            {\r\n                const newCard: Card | null = this.library.getCard(basicCard);\r\n\r\n                if(newCard !== null)\r\n                    this.shop[basicCard].push(newCard);\r\n            }\r\n        }\r\n\r\n        for(const kingdomCard of this.setupSelectedCards)\r\n        {\r\n            this.shop[kingdomCard] = [];\r\n            const definition : CardDefinition = this.library.getCardDefinition(kingdomCard);\r\n            for (let i = 0; i < definition.startingAmount; i++) \r\n            {\r\n                const newCard: Card | null = this.library.getCard(kingdomCard);\r\n\r\n                if(newCard !== null)\r\n                    this.shop[kingdomCard].push(newCard);\r\n            }\r\n        }\r\n\r\n        for(const player of this.players)\r\n        {\r\n            //add 3 estates\r\n            for(let i = 0; i < 3; i++)\r\n            {\r\n                const estate: Card | undefined = this.shop[Estate.cardName].pop();\r\n                if(estate !== undefined)\r\n                {\r\n                    player.gain(Location.deck, estate);\r\n                }\r\n            }\r\n\r\n            //add 7 coppers\r\n            for(let i = 0; i < 7; i++)\r\n            {\r\n                const estate: Card | undefined = this.shop[Copper.cardName].pop();\r\n                if(estate !== undefined)\r\n                {\r\n                    player.gain(Location.deck, estate);\r\n                }\r\n            }\r\n\r\n            // now that we have our starting deck, shuffle and draw 5\r\n            player.shuffle();\r\n\r\n            player.draw(5);\r\n        }\r\n\r\n        // pick a starting player\r\n        \r\n        this.currentPlayer = Math.floor(Math.random() * this.players.length);\r\n        \r\n        this.players[this.currentPlayer].actions= 1;\r\n        this.players[this.currentPlayer].buys = 1;\r\n        this.players[this.currentPlayer].coins = 0;\r\n\r\n        this.shop[Province.cardName].splice(1, 8);\r\n\r\n        /* for testing game over\r\n        for(const player of this.players)\r\n        {\r\n            const victoryCards = Math.floor(Math.random() * 10);\r\n            for(let i = 0; i < victoryCards; i++)\r\n            {\r\n                const card: Card | null = this.library.getCard(\"estate\");\r\n                if(card !== null)\r\n                {\r\n                    player.deck.push(card);\r\n                }\r\n            }\r\n        }\r\n        */\r\n\r\n        this.setGameState(GameState.PlayGame);\r\n        return true;\r\n    }\r\n\r\n    public trashCard(card: Card) {\r\n        this.trash.unshift(card);\r\n    }\r\n    \r\n\r\n    public advanceGame() {\r\n\r\n        let waitingForPlayer = false;\r\n        \r\n        while(waitingForPlayer === false) \r\n        {\r\n            let currentPlayer: Player = this.players[this.currentPlayer];\r\n\r\n            //get ready of anything currently executing\r\n            for(let i = this.executingCards.length - 1; i >= 0; i--)\r\n            {\r\n                const card: CardDefinition = this.executingCards[i];\r\n                this.finishExecution(card);\r\n            }\r\n\r\n            // they are still waiting, give them something to do\r\n            if(currentPlayer.state === PlayerState.WaitingForTurn)\r\n            {\r\n                currentPlayer.setState(PlayerState.Action, this);\r\n            }\r\n\r\n            else if (currentPlayer.state === PlayerState.Action)\r\n            {\r\n                currentPlayer.setState(PlayerState.Buy, this);\r\n            }\r\n\r\n            else if (currentPlayer.state === PlayerState.Buy)\r\n            { \r\n                currentPlayer.setState(PlayerState.CleanUp, this);\r\n\r\n            }\r\n\r\n            else if (currentPlayer.state === PlayerState.CleanUp)\r\n            {\r\n                //nothing for user/AI to do, just auto clean up\r\n                currentPlayer.cleanUp();\r\n                currentPlayer.setState(PlayerState.WaitingForTurn, this);\r\n                this.currentPlayer = (this.currentPlayer + 1) % this.players.length;// after clean up, move to the next player\r\n                currentPlayer = this.players[this.currentPlayer];\r\n                //you get 1 action, 1 buy, and no coins to start your turn\r\n                currentPlayer.setState(PlayerState.Action, this);\r\n                currentPlayer.actions= 1;\r\n                currentPlayer.buys = 1;\r\n                currentPlayer.coins = 0;\r\n            }\r\n\r\n            currentPlayer.addStateActions(this);\r\n\r\n            //if we need to wait for huiman action, get out of here\r\n            if(currentPlayer.userSelections.length > 0 && currentPlayer instanceof HumanPlayer)\r\n                waitingForPlayer = true;\r\n        }\r\n    }\r\n\r\n    public checkGameOver(): boolean {\r\n        let gameOver = false;\r\n        if(this.shop[Province.cardName].length === 0)\r\n            gameOver = true;\r\n        else\r\n        {\r\n            let empty = 0;\r\n            for(const card in this.shop)\r\n            {\r\n                if(this.shop[card].length === 0)\r\n                    empty++;\r\n            }\r\n            if(empty >= 3)\r\n                gameOver = true;\r\n        }\r\n\r\n        return gameOver;\r\n    }\r\n\r\n    //a player chose something, decide what to do with it\r\n    onCardsSelected(playerIndex: number, cards: Card[]): boolean\r\n    {\r\n        const player: Player = this.players[playerIndex];\r\n\r\n        let validSelection = false;\r\n        const currentSelections: UserSelection[] = player.userSelections[player.userSelections.length - 1];\r\n        for(const selection of currentSelections)\r\n        {\r\n            let allCardsValid = true;\r\n            for(const card of cards)\r\n            {\r\n                if(selection.isValid(card) === false)\r\n                {\r\n                    allCardsValid = false;\r\n                }\r\n            }\r\n\r\n            if(allCardsValid === true)\r\n                validSelection = true;\r\n        }\r\n\r\n        //cards not valid\r\n        if(validSelection === false)\r\n            return false;\r\n\r\n        //if there's an executing card, it gets the selection\r\n        if(this.executingCards.length > 0)\r\n        {\r\n            if(this.executingCards[this.executingCards.length - 1].onSelection(this, player, cards) === false)\r\n                return false;\r\n        }\r\n        //determine what to do with the selection based on turn phase\r\n        else if(player.state == PlayerState.Action)\r\n        {\r\n            if(cards.length > 0 && player.actions > 0)\r\n            {\r\n                //1 card selected at a time\r\n                const card: Card = cards[0];\r\n\r\n                //card better be in your hand\r\n                for(const handCard of player.hand)\r\n                {\r\n                    if(handCard.id === card.id && card.type === CardType.action)\r\n                    {\r\n                        //the user chose to play this action card\r\n                        const cardDefinition: CardDefinition = this.library.getCardDefinition(card.name);\r\n\r\n                        if(cardDefinition.cardType === CardType.action)\r\n                        {\r\n                            this.executingCards.push(cardDefinition);\r\n                            player.actions--;\r\n\r\n                            //remove card from hand, put it in play\r\n                            let index = -1;\r\n                            for(let i = 0; i < player.hand.length; i++)\r\n                            {\r\n                                if(player.hand[i].id === card.id)\r\n                                    index = i;\r\n                            }\r\n                            player.hand.splice(index, 1);\r\n                            player.inPlay.unshift(card);\r\n\r\n                            cardDefinition.execute(this, player);\r\n                        }\r\n                        else\r\n                        {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if(player.state == PlayerState.Buy && player.buys > 0)\r\n        {\r\n            if(cards.length > 0)\r\n            {\r\n                //1 card selected at a time\r\n                const card: Card = cards[0];\r\n\r\n                //if this is a card in the players hand, and it's a treasure card, play it\r\n                for(const handCard of player.hand)\r\n                {\r\n                    if(handCard.id === card.id && card.type === CardType.treasure)\r\n                    {\r\n                        const treasureCardDefinition : CardDefinition = this.library.getCardDefinition(card.name);\r\n                        this.executingCards.push(treasureCardDefinition);\r\n\r\n                        //remove card from hand, put it in play\r\n                        let index = -1;\r\n                        for(let i = 0; i < player.hand.length; i++)\r\n                        {\r\n                        if(player.hand[i].id === card.id)\r\n                            index = i;\r\n                        }\r\n                        player.hand.splice(index, 1);\r\n                        player.inPlay.unshift(card);\r\n\r\n                        treasureCardDefinition.execute(this, player);\r\n                    }\r\n                }\r\n\r\n                //if this is a card in the shop, buy it\r\n                //we know the card is in the shop if it is the top card of it's buy pile\r\n                if(this.shop[card.name][0].id === card.id)\r\n                {\r\n                    const cost: number = this.library.getCardDefinition(card.name).cost;\r\n\r\n                    if(player.coins >= cost)\r\n                    {\r\n                        this.shop[card.name].splice(0, 1);\r\n                        player.gain(Location.discard, card);\r\n                        player.coins -= cost;\r\n                        player.buys--;\r\n                    }\r\n                    else \r\n                    {\r\n                        return false;\r\n                    }\r\n\r\n                    //the game always ends after buying something, so check if it's over here\r\n                    if(this.checkGameOver())\r\n                    {\r\n                         //Game Over! show the end screen\r\n                        this.state = GameState.GameOver;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onPromptClicked(playerIndex: number, prompt: string, cards: Card[]) {\r\n        \r\n        if(this.executingCards.length > 0)\r\n        {\r\n            if(this.executingCards[this.executingCards.length - 1].onPrompt(prompt, this, this.players[playerIndex], cards) === true)\r\n                return;\r\n        }\r\n        if(prompt == 'done')\r\n        {\r\n            this.advanceGame();\r\n        }\r\n    }\r\n\r\n    //called by a card definition when execution is finished\r\n    finishExecution(finishing: CardDefinition) {\r\n        const current: CardDefinition = this.executingCards[this.executingCards.length - 1];\r\n\r\n        // this better be the same card, things can't finish out of order\r\n        if(current.getCardName() === finishing.getCardName())\r\n        {\r\n            this.executingCards.splice(this.executingCards.length - 1, 1);\r\n        }\r\n\r\n        else\r\n        {\r\n            console.log('ERROR: cards finished executing out of order');\r\n            return;\r\n        }\r\n    }\r\n}","import { Card } from \"./card\";\r\nimport { CardType } from \"./card-definition\";\r\nimport { CardLibrary } from \"./card-library\";\r\nimport { Game } from \"./game\";\r\n\r\nexport enum Location {\r\n    deck = 0,\r\n    revealed,\r\n    hand,\r\n    inPlay,\r\n    discard,\r\n    shop\r\n}\r\n\r\nexport enum PlayerState {\r\n    Action = \"action\",\r\n    Buy = \"buy\",\r\n    CleanUp = \"clean-up\",\r\n    WaitingForTurn= \"waiting\"\r\n}\r\n\r\nexport interface UserSelection {\r\n    location: Location;\r\n    isValid: (card:Card) => boolean; //function that returns whether a given card can be added to the selection\r\n    count: number\r\n}\r\n\r\nexport abstract class Player {\r\n\r\n    private library: CardLibrary;\r\n\r\n    public name: string;\r\n    public index: number; // index within game's player array\r\n    public color: string;\r\n\r\n    public state: PlayerState;\r\n    public setupReady: boolean;\r\n\r\n    public deck: Card[];\r\n    public revealed: Card[];\r\n    public hand: Card[];\r\n    public inPlay: Card[];\r\n    public discard: Card[];\r\n\r\n    public actions: number;\r\n    public buys: number;\r\n    public coins: number;\r\n    public userPrompts: string[][]; // this is a stack of arrays of strings. Describes prompts display ed to the user on status bar buttons\r\n\r\n    public userSelections: UserSelection[][]; // this is a stack of arrays that describe what the user can select right now\r\n\r\n    public status: string;\r\n\r\n    constructor(playerName: string, playerColor: string, index: number)\r\n    {\r\n        this.library = new CardLibrary;\r\n\r\n        this.name = playerName;\r\n        this.index = index;\r\n        this.color = playerColor;\r\n        this.state = PlayerState.WaitingForTurn;\r\n        this.setupReady = false;\r\n\r\n        this.deck = [];\r\n        this.revealed = [];\r\n        this.hand = [];\r\n        this.inPlay = [];\r\n        this.discard = [];\r\n\r\n        this.actions = 0;\r\n        this.buys = 0;\r\n        this.coins = 0;\r\n\r\n        this.userSelections = [];\r\n        this.userPrompts = [];\r\n\r\n        this.status = \"\";\r\n    }\r\n\r\n\r\n    public gain(location: Location, card: Card)\r\n    {\r\n        switch(location)\r\n        {\r\n            case Location.deck:\r\n                this.deck.push(card);\r\n                break;\r\n\r\n            case Location.hand:\r\n                this.hand.push(card);\r\n                break;\r\n\r\n            case Location.discard:\r\n                this.discard.unshift(card); //add to front of discard so player can see it\r\n                break;\r\n        }\r\n    }\r\n\r\n    public draw(drawCount: Number) {\r\n        for(let i = 0; i < drawCount; i++)\r\n        {\r\n            if(this.deck.length > 0)\r\n            {\r\n                const card: Card | undefined = this.deck.pop();\r\n                if(card !== undefined) {\r\n                    this.hand.push(card);\r\n                }\r\n            }\r\n            //no cards in deck, move cards from discard to deck\r\n            else \r\n            {\r\n                while(this.discard.length > 0)\r\n                {\r\n                    const discardCard: Card | undefined = this.discard.pop();\r\n                    if(discardCard !== undefined)\r\n                        this.deck.push(discardCard);\r\n                }\r\n\r\n                // shuffle, then draw if we have a deck\r\n                this.shuffle();\r\n\r\n                if(this.deck.length > 0)\r\n                {\r\n                    const card: Card | undefined = this.deck.pop();\r\n                    if(card !== undefined) {\r\n                        this.hand.push(card);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public shuffle() {\r\n        // perform a fisher-yates shuffle on the deck array\r\n        // this is done by swapping each element of the array with a random previous element\r\n        for (let i = this.deck.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n        \r\n            [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];\r\n        }\r\n    }\r\n\r\n    public discardCard(card: Card)\r\n    {\r\n        for(let i = 0; i < this.hand.length; i++)\r\n        {\r\n            if(this.hand[i].id === card.id)\r\n            {\r\n                this.hand.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.discard.push(card);\r\n    }\r\n\r\n    //execute the clean up phase\r\n    public cleanUp() {\r\n\r\n        //move revealed into discard (prob shouldn't be any at this point...)\r\n        while(this.revealed.length > 0)\r\n        {\r\n            const card : Card = this.revealed[0];\r\n            this.revealed.splice(0, 1);\r\n\r\n            this.discard.push(card);\r\n        }\r\n\r\n        //move hand into discard\r\n        while(this.hand.length > 0)\r\n        {\r\n            const card : Card = this.hand[0];\r\n            card.revealedToOthers = false;\r\n            this.hand.splice(0, 1);\r\n\r\n            this.discard.push(card);\r\n        }\r\n\r\n        //move in play into discard\r\n        while(this.inPlay.length > 0)\r\n        {\r\n            const card : Card = this.inPlay[0];\r\n            card.revealedToOthers = false;\r\n            this.inPlay.splice(0, 1);\r\n\r\n            this.discard.push(card);\r\n        }\r\n\r\n        //draw a new hand\r\n        this.draw(5);\r\n\r\n        //reset values\r\n        this.actions = 0;\r\n        this.buys = 0;\r\n        this.coins = 0;\r\n    }\r\n\r\n    //how many cards of the given type are in our hand?\r\n    public typeAmountInHand(type: CardType) : number {\r\n        let count: number = 0;\r\n\r\n        //if the current player has actions left, but no action cards in their hand, move to buy phase\r\n        for(let card of this.hand)\r\n        {\r\n            if(this.library.getCardDefinition(card.name).cardType == CardType.action)\r\n                count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    //set the current state, and set what kind of card we want the user to pick\r\n    public setState(state: PlayerState, game: Game){\r\n        this.state = state;\r\n\r\n        //when moving to a new phase, we start fresh\r\n        this.userSelections = [];\r\n        this.userPrompts = [];\r\n    }\r\n\r\n    public addStateActions(game: Game)\r\n    {\r\n        // tell the user what we're looking for\r\n        if(this.state === PlayerState.WaitingForTurn)\r\n        {\r\n            //nothing to pick\r\n        }\r\n        else if(this.state === PlayerState.Action)\r\n        {\r\n            //in the action phase you choose actions to play from your hand\r\n            const actionPhaseSelections: UserSelection[] = [];\r\n            const pickAction : UserSelection = { location: Location.hand, isValid: (card: Card) => {return card.type === CardType.action;}, count: 1};\r\n            actionPhaseSelections.push(pickAction);\r\n\r\n            this.userPrompts.push(['done']);\r\n            this.pushSelection(actionPhaseSelections, game);\r\n        }\r\n        else if (this.state === PlayerState.Buy)\r\n        {\r\n            //in the buy phase you can play treasure cards to get more coins, and use coins to buy from the shop\r\n            const buyPhaseSelections: UserSelection[] = [];\r\n            const pickTreasure : UserSelection = { location: Location.hand, isValid: (card: Card) => {return card.type === CardType.treasure;}, count: 1};\r\n            const pickShop : UserSelection = { location: Location.shop, isValid: (card: Card) => {return true;}, count: 1};\r\n            buyPhaseSelections.push(pickTreasure);\r\n            buyPhaseSelections.push(pickShop);\r\n\r\n            this.userPrompts.push(['done']);\r\n            this.pushSelection(buyPhaseSelections, game);\r\n        }\r\n        else if(this.state === PlayerState.CleanUp)\r\n        {\r\n            //nothing to pick\r\n        }\r\n    }\r\n\r\n    public pushSelection(selection: UserSelection[], game: Game)\r\n    {\r\n        this.userSelections.push(selection);\r\n\r\n        //if we give the AI a selection, just do it\r\n        if(this instanceof AIPlayer)\r\n        {\r\n            const ai: AIPlayer = this as AIPlayer;\r\n            ai.doCurrentSelection(game);\r\n        }\r\n    }\r\n\r\n    public popSelection() : UserSelection[] {\r\n        const popped: UserSelection[] = this.userSelections[this.userSelections.length-1];\r\n        this.userSelections.splice(this.userSelections.length-1, 1);\r\n        return popped;\r\n    }\r\n\r\n    public pushPrompt(prompts: string[]) \r\n    {\r\n        this.userPrompts.push(prompts);\r\n    }\r\n\r\n    public popPrompt() : string[] {\r\n        const popped: string[] = this.userPrompts[this.userPrompts.length-1];\r\n        this.userPrompts.splice(this.userPrompts.length -1, 1);\r\n        return popped;\r\n    }\r\n}\r\n\r\nexport class HumanPlayer extends Player{\r\n\r\n    public socketId: any;\r\n    public connected: boolean;\r\n\r\n    constructor(playerName: string, playerColor: string, socketId: any, index: number) {\r\n        super(playerName, playerColor, index);\r\n        this.socketId = socketId;\r\n        this.connected = true;\r\n        this.setupReady = false;\r\n    }\r\n    \r\n    public SetConnected(connected: boolean)\r\n    {\r\n        this.connected = connected;\r\n    }\r\n}\r\n\r\nexport class AIPlayer extends Player{\r\n\r\n    constructor(playerName: string, playerColor: string, index: number, game: Game) {\r\n        super(playerName, playerColor, index);\r\n        this.setupReady = true;\r\n        // this.game = game;\r\n    }\r\n\r\n    //ugly sleep, yuck\r\n    public wait(ms: number){\r\n        var start = new Date().getTime();\r\n        var end = start;\r\n        while(end < start + ms) {\r\n          end = new Date().getTime();\r\n       }\r\n    }\r\n\r\n    public doCurrentSelection(game: Game) {\r\n\r\n        //wait a bit to let users see what's happening\r\n        this.wait(1000);\r\n\r\n        if(this.userSelections.length > 0)\r\n        {\r\n            const currentSelection : UserSelection[] = this.userSelections[this.userSelections.length - 1];\r\n\r\n            for(let i = 0; i < currentSelection.length; i++)\r\n            {\r\n                const selection = currentSelection[i];\r\n                switch(selection.location)\r\n                {\r\n                    case Location.hand:\r\n                        let cards: Card[] = [];\r\n                        for (const card of this.hand)\r\n                        {\r\n                            if(selection.isValid(card) === true)\r\n                            {\r\n                                cards.push(card);\r\n                                if( cards.length === selection.count)\r\n                                {\r\n                                    //tell the game we choose these cards\r\n                                    if(game.onCardsSelected(this.index, cards) === true)\r\n                                        return;\r\n                                }\r\n                            }\r\n                        }\r\n                        //didn't find anything, send back a blank\r\n                        if(i == currentSelection.length - 1)\r\n                        {\r\n                            game.onCardsSelected(this.index, cards);\r\n                        }\r\n                        break;\r\n                    case Location.deck:\r\n                        break;\r\n\r\n                    case Location.shop:\r\n                        for(const card in game.shop)\r\n                        {\r\n                           let cards: Card[] = [];\r\n                           cards.push(game.shop[card][0]);\r\n\r\n                           if(game.onCardsSelected(this.index, cards) === true)\r\n                            return;\r\n                        }\r\n                        //somehow none of the cards in the shop worked, uh oh\r\n                        break;\r\n\r\n                    case Location.discard:\r\n                        //need to implement this if it's ever a thing\r\n                        break;\r\n                    \r\n                    case Location.inPlay:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { CardDefinition, CardType } from \"./card-definition\";\r\nimport { Game } from \"./game\";\r\nimport { Player } from \"./player\";\r\n\r\nexport abstract class TreasureCardDefinition extends CardDefinition {\r\n\r\n    coinValue : number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.coinValue = 0;\r\n        this.cardType = CardType.treasure;\r\n    }\r\n\r\n    getCoinValue() : number {\r\n\r\n        return this.coinValue;\r\n    }\r\n\r\n    //increase the player's coin value when the card is played\r\n    public execute(game: Game, player: Player) {\r\n        player.coins += this.getCoinValue();\r\n        game.finishExecution(this);\r\n    }\r\n}","import { CardDefinition, CardType } from \"./card-definition\";\r\n\r\nexport abstract class VictoryCardDefinition extends CardDefinition {\r\n\r\n    constructor() {\r\n        super();\r\n        this.cardType = CardType.victory;\r\n    }\r\n\r\n    abstract GetVictoryPoints() : number;\r\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { GameService } from './game.service';\nimport { Game } from '../../../Common/src/game';\nimport { Card } from '../../../Common/src/card';\nimport { CookieService } from 'ngx-cookie-service';\nimport { StatusService } from './status.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit{\n  title = 'Dominion';\n  game: Game;\n  viewedCard: Card;\n  viewedPile: Card[];\n\n  constructor(public gameService: GameService) {\n    this.viewedCard = undefined;\n    this.viewedPile = [];\n  }\n\n  ngOnInit() {\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.game = game;\n    });\n\n    this.gameService.onViewedCardChanged().subscribe((viewedCard: Card) => {\n      this.viewedCard = viewedCard;\n    });\n\n    this.gameService.onViewedPileChanged().subscribe((viewedPile: Card[]) => {\n      this.viewedPile = viewedPile;\n    });\n  }\n\n  onCloseSelected() {\n    this.gameService.setViewedCard(undefined);\n    this.gameService.setViewedPile([], '');\n  }\n}\n\n","<app-join-game *ngIf=\"game === undefined\"></app-join-game>\n<app-setup-game *ngIf=\"game != undefined && game.state === 'setup' \"></app-setup-game>\n<app-play-game *ngIf=\"game != undefined && game.state === 'play' \"></app-play-game>\n<app-game-over *ngIf=\"game != undefined && game.state === 'over' \"></app-game-over>\n\n<div id = \"viewedCard\" *ngIf = \"viewedCard != undefined\">\n    <div id = \"grayOut\">\n        <h1 id=\"close\" (click)=\"onCloseSelected()\">X</h1>\n        <app-card id = \"card\" [card] = \"viewedCard\" [selected]=\"false\" [orientation]=\"'bottom'\" [revealed]=\"true\"></app-card>\n    </div>\n</div>\n\n<div id = \"viewedPile\" *ngIf = \"viewedPile.length > 0\">\n    <div id = \"grayOut\">\n        <h1 id=\"close\" (click)=\"onCloseSelected()\">X</h1>\n        <div id=\"pileView\">\n            <app-card *ngFor=\"let pileCard of viewedPile\" id = \"pileCard\" [card] = \"pileCard\" [selected]=\"false\" [orientation]=\"'bottom'\" [revealed]=\"true\"></app-card>         \n        </div>\n        \n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\n\nimport { AppComponent } from './app.component';\n\nimport { CardComponent } from './card/card.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { JoinGameComponent } from './join-game/join-game.component';\nimport { PlayGameComponent } from './play-game/play-game.component';\nimport { BannerComponent } from './banner/banner.component';\n\n// angular material imports\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport {  MatMenuModule } from '@angular/material/menu';\nimport {  MatToolbarModule } from '@angular/material/toolbar';\nimport {  MatIconModule } from '@angular/material/icon';\nimport {  MatSidenavModule } from '@angular/material/sidenav';\nimport {  MatListModule } from '@angular/material/list';\nimport { SetupGameComponent } from './setup-game/setup-game.component';\nimport {MatSelectModule} from '@angular/material/select';\nimport { PlayerComponent } from './player/player.component';\nimport { CardPileComponent } from './card-pile/card-pile.component';\nimport { ShopComponent } from './shop/shop.component';\nimport { GameOverComponent } from './game-over/game-over.component';\nimport {CookieService } from 'ngx-cookie-service';\n\nconst config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };\n\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      CardComponent,\n      JoinGameComponent,\n      PlayGameComponent,\n      BannerComponent,\n      SetupGameComponent,\n      PlayerComponent,\n      CardPileComponent,\n      ShopComponent,\n      GameOverComponent\n   ],\n   imports: [\n      BrowserModule,\n      BrowserAnimationsModule,\n      HttpClientModule,\n      FormsModule,\n      SocketIoModule.forRoot(config),\n      MatButtonModule,\n      MatMenuModule,\n      MatCardModule,\n      MatToolbarModule,\n      MatIconModule,\n      MatSidenavModule,\n      MatListModule,\n      MatSelectModule\n   ],\n   providers: [ CookieService ],\n   bootstrap: [\n      AppComponent\n   ]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.css']\n})\nexport class BannerComponent implements OnInit {\n\n  imgSrc: string;\n  constructor() {\n    this.imgSrc = '/assets/dominion-banner.jfif';\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<img src=\"assets/dominion-banner.jfif\"/>","import { Component, OnInit, Input } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\n\n@Component({\n  selector: 'app-card-pile',\n  templateUrl: './card-pile.component.html',\n  styleUrls: ['./card-pile.component.css']\n})\nexport class CardPileComponent implements OnInit {\n\n  @Input() cards: Card[];\n  @Input() revealed: boolean; // can users see the cards in the pile? or should we show the card back?\n  @Input() orientation: string;\n  @Input() location = '';\n  @Input() showLocationLabel = false;\n\n  hovered: boolean;\n\n  constructor(private gameService: GameService) {\n    this.hovered = false;\n  }\n\n\n  ngOnInit() {\n  }\n\n  getImgSrc(): string {\n    let url = '/assets/card_images/';\n    url += this.orientation;\n    url += '/';\n    if (this.revealed === true)\n    {\n      url += this.cards[0].imageName;\n    }\n    else\n    {\n      url += 'Card_Back.jpg';\n    }\n    return url;\n  }\n\n  onClick() {\n    if (this.revealed === true)\n    {\n      this.gameService.setViewedPile(this.cards, this.location);\n    }\n  }\n\n}\n","<p id = \"title\" *ngIf=\"showLocationLabel === true\">{{location}}</p>\n<img  *ngIf=\"cards.length > 0\" \n[class.hovered]=\"hovered\"\n[ngClass]=\"{\n    'bottom': orientation==='bottom',\n    'left': orientation==='left',\n    'top': orientation==='top',\n    'right': orientation==='right'\n }\"  src = \"{{getImgSrc()}}\" (click)=\"onClick()\">\n\n \n<div id = \"hoverArea\" (mouseenter)=\"hovered = true\" (mouseleave)=\"hovered = false\" (click)=\"onClick()\"></div>\n\n<p id = \"count\" *ngIf=\"cards.length > 0\">{{cards.length}}</p>","import { Component, OnInit, Input, HostBinding, HostListener } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n})\n\nexport class CardComponent implements OnInit {\n\n  @Input() card: Card;\n  @Input() selected = false;\n  @Input() highlighted = false;\n  @Input() orientation: string;\n  @Input() revealed: boolean;\n\n  hovered: boolean;\n\n\n  constructor(private gameService: GameService) {\n    this.hovered = false;\n   }\n\n  ngOnInit() {\n  }\n\n  getImgSrc(): string {\n    let url = '/assets/card_images/';\n    url += this.orientation;\n    url += '/';\n    if (this.revealed === true)\n    {\n      url += this.card.imageName;\n    }\n    else\n    {\n      url += 'Card_Back.jpg';\n    }\n    return url;\n  }\n\n  onClick() {\n    this.gameService.onCardSelected(this.card);\n  }\n\n  onView() {\n    this.gameService.setViewedCard(this.card);\n  }\n}\n","\r\n<img src=\"{{getImgSrc()}}\" [class.hovered]=\"hovered\" [class.selected]=\"selected\" [class.unselected]=\"!selected\" [class.highlighted]=\"highlighted\" (click)=\"onClick()\" [ngClass]=\"{\r\n    'bottom': orientation==='bottom',\r\n    'left': orientation==='left',\r\n    'top': orientation==='top',\r\n    'right': orientation==='right'\r\n}\" >\r\n\r\n<div id = \"hoverArea\" (mouseenter)=\"hovered = true\" (mouseleave)=\"hovered = false\" (click)=\"onClick()\"></div>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Game } from '../../../../Common/src/game';\nimport { GameService } from '../game.service';\nimport { CardLibrary } from '../../../../Common/src/card-library';\nimport { Player } from '../../../../Common/src/player';\nimport { CardType } from '../../../../Common/src/card-definition';\nimport { VictoryCardDefinition } from '../../../../Common/src/victory-card-definition';\n\n@Component({\n  selector: 'app-game-over',\n  templateUrl: './game-over.component.html',\n  styleUrls: ['./game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n\n  orderedPlayers: [string, number][];\n  winner: string;\n\n  constructor(private gameService: GameService) {\n    this.orderedPlayers = [];\n    this.winner = '';\n  }\n\n  ngOnInit() {\n    const game: Game = this.gameService.getGame();\n\n    // calculate victory points for each player, and put them in order by amount of points\n    const cardLibrary: CardLibrary = new CardLibrary();\n\n    for (const player of game.players)\n    {\n      let playerPoints = 0;\n      for (const card of player.deck)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.revealed)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.hand)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.inPlay)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.discard)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n\n      let inserted = false;\n      for (let i = 0; i <= this.orderedPlayers.length && inserted === false; i++)\n      {\n        if (i === this.orderedPlayers.length)\n        {\n          this.orderedPlayers.push([player.name, playerPoints]);\n          inserted = true;\n        }\n        else if (playerPoints > this.orderedPlayers[i][1])\n        {\n          this.orderedPlayers.splice(i, 0, [player.name, playerPoints]);\n          inserted = true;\n        }\n      }\n    }\n    // check for tie\n    if (this.orderedPlayers.length >= 2 && this.orderedPlayers[0][1] === this.orderedPlayers[1][1])\n    {\n      this.winner = 'It\\'s a tie between (';\n      for (const player of this.orderedPlayers)\n      {\n        if (player[1] === this.orderedPlayers[0][1])\n        {\n          this.winner +=  ' ' + player[0];\n        }\n      }\n      this.winner += ' )!';\n    }\n    else\n    {\n      this.winner = this.orderedPlayers[0][0] + ' wins!';\n    }\n  }\n\n  onLeaveGame() {\n    this.gameService.leaveGame();\n  }\n\n}\n","<app-banner></app-banner>\n\n<br>\n<mat-divider></mat-divider>\n<br>\n\n<mat-card id=\"content\">\n<mat-card-title>{{winner}}</mat-card-title>\n<mat-card-content>\n\n  <h1>Results</h1>\n  <table>\n    <th>Player</th><th>Victory Points</th>\n    <tr *ngFor=\"let player of orderedPlayers\"><td>{{player[0]}}</td><td>{{player[1]}}</td></tr>\n  </table>\n  <button mat-button color=\"primary\" (click)=\"onLeaveGame()\">Leave Game</button>\n</mat-card-content>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable, Subject } from 'rxjs';\nimport { Game, GameState } from '../../../Common/src/game';\nimport { Player, PlayerState, Location } from '../../../Common/src/player';\nimport { StatusService } from './status.service';\nimport { Card } from '../../../Common/src/card';\nimport { CardType } from '../../../Common/src/card-definition';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  private player: Player;\n  private game: Game;\n  private gameSubject: Subject<Game>;\n\n  private viewedCard: Card;\n  private viewedCardSubject: Subject<Card>;\n\n  private viewedPile: Card[];\n  private viewedPileSubject: Subject<Card[]>;\n\n  private selectedCards: Card[];\n\n  constructor(private socket: Socket, private statusService: StatusService) {\n    this.gameSubject = new Subject<Game>();\n    this.viewedCardSubject = new Subject<Card>();\n    this.selectedCards = [];\n    this.viewedPile = [];\n    this.viewedPileSubject = new Subject<Card[]>();\n\n    this.socket.on('game-updated', (game: Game) => {\n        if (this.game !== undefined)\n        {\n          this.game = game;\n          this.player = game.players[this.player.index];\n          this.gameSubject.next(this.game);\n\n          console.log(this.player);\n          this.statusService.updateStatus(this.game);\n        }\n    });\n  }\n\n  public getPlayer(): Player {\n    return this.player;\n  }\n\n  // server communication through socket io\n\n  public sendToServer(event: string, data: any, returnCallback: (returnValue: any) => void): any{\n        console.log('emiting: ' + event);\n        this.socket.emit(event, data, (result: {ok: boolean, error: string, returnValue, any }) => {\n        if (result.ok === true)\n        {\n          returnCallback(result.returnValue);\n        }\n        else\n        {\n          this.statusService.setStatus(result.error);\n          console.log('error sending: ' + event + '. reason: ' + result.error);\n        }\n\n        return result.returnValue;\n      } );\n  }\n\n  public joinGame(myPlayerName: string, myPlayerColor: string, myGameName: string)\n  {\n    this.sendToServer('join-game', { playerName: myPlayerName, playerColor: myPlayerColor, gameName: myGameName }, (returnValue: any) => {\n      this.player = returnValue.player;\n      this.game = returnValue.game;\n      this.gameSubject.next(this.game);\n    });\n  }\n\n  public createGame(newPlayerName: string, newPlayerColor: string, newGameName: string)\n  {\n    // create the game, and join it if it's created successfully\n    this.sendToServer('create-game', newGameName, () => {\n      this.joinGame(newPlayerName, newPlayerColor, newGameName);\n    });\n  }\n\n  public leaveGame()\n  {\n    this.sendToServer('leave-game', {gameName: this.game.name, playerIndex: this.player.index}, () => {});\n  }\n\n  public addBot(myBotName: string)\n  {\n    console.log(this.game);\n    this.sendToServer('add-bot', { gameName: this.game.name, botName: myBotName}, () => {\n    });\n  }\n\n  public requestGames()\n  {\n    this.sendToServer('request-games-list', {}, () => {});\n  }\n\n  public setupSelectCard(card: Card)\n  {\n    this.sendToServer('setup-card-selected', {\n      gameName: this.game.name,\n      cardName: card.name\n    }, () => {});\n  }\n\n  public setupSelectPreset(selectedPreset: string)\n  {\n    this.sendToServer('setup-preset-selected', {\n      gameName: this.game.name,\n      presetName: selectedPreset\n    }, () => {});\n  }\n\n  public setupReady() {\n    this.sendToServer('setup-player-ready', {\n      gameName: this.game.name,\n      playerName: this.player.name\n    }, () => {});\n  }\n\n  public setupStartGame() {\n    this.sendToServer('setup-start-game', {\n      gameName: this.game.name\n    }, () => {});\n  }\n\n\n  public getGame(): Game {\n    return this.game;\n  }\n\n  public onGameChanged = () => {\n    return this.gameSubject.asObservable();\n  }\n\n  public onGamesUpdated = () => {\n    return Observable.create((observer) => {\n      this.socket.on('games-updated', (games: Game[]) => {\n        if (this.game !== undefined)\n        {\n          let bFound = false;\n          for (const game of games)\n          {\n            if (game.name === this.game.name)\n            {\n              bFound = true;\n              if (game.players. length > this.player.index && game.players[this.player.index].name === this.player.name)\n              {\n                console.log('updated game');\n                this.game = game;\n                this.gameSubject.next(this.game);\n              }\n              else\n              {\n                console.log('we left the game');\n                // we aren't in the game anymore, clear out\n                this.game = undefined;\n                this.player = undefined;\n                this.gameSubject.next(this.game);\n              }\n            }\n          }\n          if (bFound === false)\n          {\n            console.log('we left the game');\n            // we aren't in the game anymore, clear out\n            this.game = undefined;\n            this.player = undefined;\n            this.gameSubject.next(this.game);\n          }\n        }\n        observer.next(games);\n      });\n    });\n  }\n\n  public onPromptClicked(clickedPrompt: string){\n    this.sendToServer('prompt-clicked', {\n      gameName: this.game.name,\n      playerIndex: this.player.index,\n      prompt: clickedPrompt,\n      cards: this.selectedCards\n    }, () => {});\n    this.selectedCards = [];\n  }\n\n  public onCardSelected(card: Card) {\n\n    // card selected for setup\n    if (this.game.state === GameState.Setup)\n    {\n      this.setupSelectCard(card);\n      return;\n    }\n\n    // card selected in game\n    // if the card is already selected, remove it from the selection\n    for (let i = 0; i < this.selectedCards.length; i++)\n    {\n      const selectedCard = this.selectedCards[i];\n      if (selectedCard.id === card.id)\n      {\n        this.selectedCards.splice(i, 1);\n        return;\n      }\n    }\n    this.selectedCards.push(card);\n    const count = this.player.userSelections[this.player.userSelections.length - 1][0].count;\n    if (this.selectedCards.length >= count && count !== -1)\n    {\n      this.sendToServer('cards-selected',\n      {\n        gameName: this.game.name,\n        playerIndex: this.player.index,\n        cards: this.selectedCards\n      }, () => {});\n      this.selectedCards = [];\n    }\n  }\n\n  public isCardSelected(card: Card): boolean {\n    for (const selectedCard of this.selectedCards)\n    {\n      if (selectedCard.id === card.id)\n      {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public isCardHighlighted(card: Card): boolean {\n    if (this.player.state === PlayerState.Action)\n    {\n      if (card.type === CardType.action && this.player.actions > 0)\n      {\n        return true;\n      }\n    }\n    else if (this.player.state === PlayerState.Buy)\n    {\n      if (card.type === CardType.treasure)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public setViewedCard(card: Card) {\n    this.viewedCard = card;\n    this.viewedPile = [];\n    this.viewedCardSubject.next(this.viewedCard);\n  }\n\n  public onViewedCardChanged = () => {\n    return this.viewedCardSubject.asObservable();\n  }\n\n  public setViewedPile(cards: Card[], location: string)\n  {\n    // you can only view a a pile when clicking the shop piles doesn't buy/gain something\n    let pickingFromShop = false;\n    if (this.player.userSelections.length > 0)\n    {\n      for (const selection of this.player.userSelections[this.player.userSelections.length - 1])\n      {\n        if (selection.location === Location.shop)\n        {\n          pickingFromShop = true;\n        }\n      }\n    }\n\n    if (location !== 'Shop' || !pickingFromShop)\n    {\n      this.viewedCard = undefined;\n      this.viewedPile = cards;\n      this.viewedPileSubject.next(this.viewedPile);\n    }\n  }\n\n  public onViewedPileChanged = () => {\n    return this.viewedPileSubject.asObservable();\n  }\n}\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { GameService } from '../game.service';\nimport { Game } from '../../../../Common/src/game';\nimport { StatusService } from '../status.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-join-game',\n  templateUrl: './join-game.component.html',\n  styleUrls: ['./join-game.component.css']\n})\nexport class JoinGameComponent implements OnInit {\n\n  gameNames: string[];\n  playerCounts: number[];\n  newGameName: string;\n  playerName: string;\n  playerColor: string;\n\n  status: string;\n\n  constructor(private gameService: GameService, private statusService: StatusService, private cookieService: CookieService) {\n    this.gameNames = [];\n    this.playerCounts = [];\n    this.newGameName = '';\n    this.playerName = this.cookieService.get('player-name');\n    this.playerColor = '#000000';\n    this.status = '';\n  }\n\n  ngOnInit() {\n    // listen for the list of games being updated\n    this.gameService\n    .onGamesUpdated()\n    .subscribe((games: Game[]) => {\n      this.gameNames = [];\n      this.playerCounts = [];\n      for (const game of games)\n      {\n        this.gameNames.push(game.name);\n        this.playerCounts.push(game.players.length);\n      }\n    });\n\n    this.statusService.onStatusChanged().subscribe((newStatus: string) => {\n      this.status = newStatus;\n    });\n\n    this.gameService.requestGames();\n  }\n\n  onJoin(gameName: string)\n  {\n    if (this.playerName !== '')\n    {\n      this.cookieService.set('player-name', this.playerName);\n      this.gameService.joinGame(this.playerName, this.playerColor, gameName);\n    }\n    else\n    {\n      this.statusService.setStatus('Please enter a player name');\n    }\n  }\n\n  onCreate()\n  {\n    if (this.playerName === '' && this.newGameName === '')\n    {\n      this.statusService.setStatus('Please enter a game and player name');\n    }\n    else if (this.playerName === '')\n    {\n      this.statusService.setStatus('Please enter a player name');\n    }\n    else if (this.newGameName === '')\n    {\n      this.statusService.setStatus('Please enter a game name');\n    }\n    else\n    {\n      this.cookieService.set('player-name', this.playerName);\n      this.gameService.createGame(this.playerName, this.playerColor, this.newGameName);\n      this.newGameName = '';\n    }\n  }\n\n}\n","<app-banner></app-banner>\n\n<br>\n<mat-divider></mat-divider>\n<br>\n<div id = \"status\" *ngIf=\"status !== ''\">\n  {{status}}\n  <br>\n  <mat-divider></mat-divider>\n  <br>\n</div>\n\n<mat-card id=\"content\">\n<mat-card-title>Create/Join Game</mat-card-title>\n<mat-card-content>\n  Name: <input  [(ngModel)]=\"playerName\"  type = \"text\" placeholder=\"\"/><br>\n  Favorite Color: <input [(ngModel)]=\"playerColor\" type=\"color\"/>\n  <br>\n\n  <h1>Games</h1>\n  <table>\n    <th>Game</th><th>Player Count</th><th></th>\n    <tr *ngFor=\"let gameName of gameNames; let i = index\"><td>{{gameName}}</td><td>{{playerCounts[i]}}/4</td><td><button mat-button color=\"primary\"(click)=\"onJoin(gameName)\">Join</button></td></tr>\n  </table>\n  <br>\n  <h1> Create New Game</h1>\n  <input  [(ngModel)]=\"newGameName\"  type = \"text\" placeholder=\"\"/>\n  <button mat-button color=\"primary\" (click)=\"onCreate()\">Create</button>\n</mat-card-content>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { GameService } from '../game.service';\nimport { Game, GameState } from '../../../../Common/src/game';\nimport { Player, PlayerState } from '../../../../Common/src/player';\nimport { StatusService } from '../status.service';\nimport { Action } from 'rxjs/internal/scheduler/Action';\nimport { CardType } from '../../../../Common/src/card-definition';\n\n@Component({\n  selector: 'app-play-game',\n  templateUrl: './play-game.component.html',\n  styleUrls: ['./play-game.component.css']\n})\nexport class PlayGameComponent implements OnInit {\n\n  game: Game;\n  myPlayer: Player;\n  leftPlayer: Player;\n  topPlayer: Player;\n  rightPlayer: Player;\n  status: string;\n\n  constructor(private gameService: GameService, private statusService: StatusService) {\n    this.game = gameService.getGame();\n    this.myPlayer = gameService.getPlayer();\n    this.initPlayers();\n    this.status = statusService.getStatus();\n  }\n\n  ngOnInit() {\n    this.statusService.onStatusChanged().subscribe((newStatus: string) => {\n      this.status = newStatus;\n    });\n\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.game = game;\n\n      this.initPlayers();\n    });\n  }\n\n  getStatus(): string {\n    if (this.myPlayer.status !== '')\n    {\n      return this.myPlayer.status;\n    }\n    else{\n      return this.status;\n    }\n  }\n\n  onPromptClicked(prompt: string) {\n    this.gameService.onPromptClicked(prompt);\n  }\n\n  isPromptHighlighted(prompt: string): boolean {\n    if (prompt === 'done')\n    {\n      if (this.myPlayer.state === PlayerState.Action)\n      {\n        let anyActions = false;\n        for (const card of this.myPlayer.hand)\n        {\n          if (card.type === CardType.action)\n          {\n            anyActions = true;\n          }\n        }\n\n        if (this.myPlayer.actions === 0 || anyActions === false)\n        {\n          return true;\n        }\n      }\n      else if (this.myPlayer.state === PlayerState.Buy && this.myPlayer.buys === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n\n  }\n\n  initPlayers() {\n    if (this.game !== undefined)\n    {\n      this.myPlayer = this.game.players[this.myPlayer.index];\n\n      if (this.game.players.length === 2)\n      {\n        this.topPlayer = this.game.players[((this.myPlayer.index + 1) % 2)];\n      }\n      else if (this.game.players.length === 3)\n      {\n        this.leftPlayer = this.game.players[((this.myPlayer.index + 1) % 3)];\n        this.topPlayer = this.game.players[((this.myPlayer.index + 2) % 3)];\n      }\n      else if (this.game.players.length === 4)\n      {\n        this.leftPlayer = this.game.players[((this.myPlayer.index + 1) % 4)];\n        this.topPlayer = this.game.players[((this.myPlayer.index + 2) % 4)];\n        this.rightPlayer = this.game.players[((this.myPlayer.index + 3) % 4)];\n      }\n    }\n  }\n\n}\n","\r\n<div id = \"status\">\r\n    {{getStatus()}}\r\n    <button mat-button *ngFor=\"let prompt of myPlayer.userPrompts[myPlayer.userPrompts.length-1]\" [class.highlighted]=\"isPromptHighlighted(prompt) === true\" (click)=\"onPromptClicked(prompt)\">{{prompt}}</button>\r\n    <mat-divider></mat-divider>\r\n</div>\r\n\r\n<div id=\"game\">\r\n    <!-- Player areas on each side of the screen-->\r\n    <app-player id=\"leftPlayer\" *ngIf=\"leftPlayer !== undefined\" [player]=\"leftPlayer\" [orientation]=\"'left'\"></app-player>\r\n    <app-player id=\"topPlayer\" *ngIf=\"topPlayer !== undefined\" [player]=\"topPlayer\" [orientation]=\"'top'\"></app-player>\r\n    <app-player id=\"rightPlayer\" *ngIf=\"rightPlayer !== undefined\" [player]=\"rightPlayer\" [orientation]=\"'right'\"></app-player>\r\n\r\n    <!-- your player on bottom-->\r\n    <app-player id=\"myPlayer\" [player]=\"myPlayer\" [orientation]=\"'bottom'\"></app-player>\r\n\r\n    <!-- Shop in the middle -->\r\n    <app-shop id = \"shop\" ></app-shop>\r\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Player } from '../../../../Common/src/player';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.css']\n})\nexport class PlayerComponent implements OnInit {\n\n  @Input() player: Player;\n  @Input() orientation: string;\n\n  constructor(private gameService: GameService) { }\n\n  ngOnInit() {\n  }\n\n  isCardSelected(card: Card): boolean {\n    return this.gameService.isCardSelected(card) === true;\n  }\n\n  isCardHighlighted(card: Card): boolean {\n    return this.gameService.isCardHighlighted(card) === true;\n  }\n}\n","\n<div id=\"bottomPlayer\" *ngIf = \"orientation === 'bottom'\">\n    <div id= \"bottomPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n    <app-card-pile id=\"bottomPlayerDeck\" [cards]=\"player.deck\" [location]=\"'Deck'\" [showLocationLabel]=\"true\" [revealed] = \"false\" [orientation] =\"'bottom'\"></app-card-pile>\n    <app-card-pile id=\"bottomPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n    <div id =\"bottomPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\"  [highlighted]=\"isCardHighlighted(card) === true && isCardSelected(card) === false\" [selected]=\"isCardSelected(card) === true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card>\n    </div>\n    <app-card-pile id=\"bottomPlayerInPlay\" [cards]=\"player.inPlay\" [location]=\"'In Play'\" [showLocationLabel]=\"true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n    <app-card-pile id=\"bottomPlayerDiscard\" [cards]=\"player.discard\" [location]=\"'Discard'\" [showLocationLabel]=\"true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n</div>\n\n<div id=\"leftPlayer\" *ngIf = \"orientation === 'left'\">\n    <div id= \"leftPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n    <app-card-pile id=\"leftPlayerDeck\" [cards]=\"player.deck\" [revealed] = \"false\" [orientation] =\"'left'\"></app-card-pile>\n    <app-card-pile id=\"leftPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'left'\"></app-card-pile>\n    <div id =\"leftPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\" [revealed] = \"card.revealedToOthers\" [orientation]=\"'left'\"></app-card>\n    </div>\n    <app-card-pile id=\"leftPlayerInPlay\" [cards]=\"player.inPlay\" [revealed] = \"true\" [orientation] =\"'left'\"></app-card-pile>\n    <app-card-pile id=\"leftPlayerDiscard\" [cards]=\"player.discard\" [revealed] = \"true\" [orientation] =\"'left'\"></app-card-pile>\n</div>\n\n<div id=\"topPlayer\" *ngIf = \"orientation === 'top'\">\n    <app-card-pile id=\"topPlayerDiscard\" [cards]=\"player.discard\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <app-card-pile id=\"topPlayerInPlay\" [cards]=\"player.inPlay\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <div id =\"topPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\" [revealed] = \"card.revealedToOthers\" [orientation]=\"'top'\"></app-card>\n    </div>\n    <app-card-pile id=\"topPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <app-card-pile id=\"topPlayerDeck\" [cards]=\"player.deck\" [revealed] = \"false\" [orientation] =\"'top'\"></app-card-pile>\n    <div id= \"topPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n</div>\n\n<div id=\"rightPlayer\" *ngIf = \"orientation === 'right'\">\n    <app-card-pile id=\"rightPlayerDiscard\" [cards]=\"player.discard\" [revealed] = \"true\" [orientation] =\"'right'\"></app-card-pile>\n    <app-card-pile id=\"rightPlayerInPlay\" [cards]=\"player.inPlay\" [revealed] = \"true\" [orientation] =\"'right'\"></app-card-pile>\n    <div id =\"rightPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\" [revealed] = \"card.revealedToOthers\" [orientation]=\"'right'\"></app-card>\n    </div>\n    <app-card-pile id=\"rightPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <app-card-pile id=\"rightPlayerDeck\" [cards]=\"player.deck\" [revealed] = \"false\" [orientation] =\"'right'\"></app-card-pile>\n    <div id= \"rightPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { CardLibrary } from '../../../../Common/src/card-library';\nimport { GameService } from '../game.service';\nimport { Game, GameState } from '../../../../Common/src/game';\n\n@Component({\n  selector: 'app-setup-game',\n  templateUrl: './setup-game.component.html',\n  styleUrls: ['./setup-game.component.css']\n})\nexport class SetupGameComponent implements OnInit {\n\n  selectedCard: Card;\n  basicCards: Card[];\n  kingdomCards: Card[];\n  library: CardLibrary;\n  game: Game;\n  presets: string[];\n  selectedPreset: string;\n\n  constructor(private gameService: GameService) { }\n\n  ngOnInit() {\n    this.library = this.library = new CardLibrary();\n    this.basicCards = [];\n    this.kingdomCards = [];\n    this.getCards();\n\n    this.presets = this.library.getPresetNames();\n    this.game = this.gameService.getGame();\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.game = game;\n      if (this.game !== undefined)\n      {\n        this.selectedPreset = this.game.setupPreset;\n      }\n    });\n  }\n\n  getCards(): void {\n    const cards: Card[] = this.library.getAllCards();\n\n    for (const card of cards)\n    {\n        if (card.isKingdom === true)\n        {\n          this.kingdomCards.push(card);\n        }\n        else\n        {\n          this.basicCards.push(card);\n        }\n    }\n  }\n\n  selectPreset() {\n    this.gameService.setupSelectPreset(this.selectedPreset);\n  }\n\n  onReady() {\n    this.gameService.setupReady();\n  }\n\n  onStart() {\n    this.gameService.setupStartGame();\n  }\n\n  // if you want to start a game, everyone needs to be ready, and you need 10 cards selected\n  canStart(): boolean{\n    let canStart = true;\n\n    for (const player of this.game.players)\n    {\n      if (!player.setupReady)\n      {\n        canStart = false;\n      }\n    }\n\n    if (this.game.setupSelectedCards.length !== 10)\n    {\n      canStart = false;\n    }\n    return canStart;\n  }\n}\n","<div id=\"playerList\">\n  <mat-card-title>Players</mat-card-title>\n  <table id = \"playerTable\">\n    <th>Player</th><th>Ready</th>\n    <tr *ngFor=\"let player of game.players\">\n        <td>\n          <!-- this cell has a nested table to make these items display next to ech other (yuck) -->\n          <table id=\"nestedTable\">\n            <tr>\n              <td>{{player.name}}</td> \n              <td><div class=\"colorBox\" [style.background]=\"player.color\"></div></td>\n            </tr>\n          </table>\n        </td>\n        <td style = \"color: green;\"*ngIf=\"player.setupReady === true\">&#10003;</td><td style = \"color: red;\" *ngIf=\"player.setupReady === false\">X</td>\n    </tr>\n  </table>\n  <button mat-button color=\"primary\" (click)=\"onReady()\">Ready</button>\n  <button mat-button color=\"primary\" (click)=\"onStart()\" [disabled]=\"!canStart()\">Start</button>\n</div>\n\n<mat-card class=\"content\" id=\"basicCardContainer\">\n  <mat-card-title>Basic Cards</mat-card-title>\n  <mat-card-content>\n      <div id = \"basicCards\">\n        <app-card  *ngFor =\"let card of basicCards\" [card]=\"card\" [selected]=\"card === selectedCard\" [revealed]=\"true\" [orientation]=\"'bottom'\"></app-card>\n      </div>\n  </mat-card-content>\n</mat-card>\n\n<br>\n\n<mat-card class=\"content\" id=\"kingdomCardContainer\">\n  <mat-card-title>Kingdom Cards</mat-card-title>\n  <mat-card-content>\n    <div id = \"presets\">\n      <mat-form-field id = \"presets\">\n        <mat-label>Reccomended Sets</mat-label>\n        <mat-select [(value)]=\"selectedPreset\" (selectionChange)=\"selectPreset()\">\n          <mat-option *ngFor=\"let preset of presets\" [value]=\"preset\">\n            {{preset}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div id = \"kingdomCards\">\n      <app-card  *ngFor =\"let card of kingdomCards\" [card]=\"card\" [selected]=\"game.setupSelectedCards.indexOf(card.name) >= 0\" [revealed]=\"true\" [orientation]=\"'bottom'\"></app-card>\n    </div>\n  </mat-card-content>\n</mat-card>","import { Component, OnInit, Input } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\nimport { Game } from '../../../../Common/src/game';\n\n@Component({\n  selector: 'app-shop',\n  templateUrl: './shop.component.html',\n  styleUrls: ['./shop.component.css']\n})\nexport class ShopComponent implements OnInit {\n\n  shop: Record<string, Card[]>;\n  basicCards: Card[][];\n  kingdomCards: Card[][];\n  trash: Card[];\n\n  constructor(private gameService: GameService) {\n    this.basicCards = [];\n    this.kingdomCards = [];\n  }\n\n  ngOnInit() {\n\n    this.shop = this.gameService.getGame().shop;\n    this.trash = this.gameService.getGame().trash;\n    this.initShopPiles();\n\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.shop = game.shop;\n      this.trash = game.trash;\n      this.initShopPiles();\n    });\n  }\n\n  initShopPiles()\n  {\n    this.basicCards = [];\n    this.kingdomCards = [];\n\n    for (const item in this.shop) {\n      if (this.shop[item][0].isKingdom)\n      {\n        this.kingdomCards.push(this.shop[item]);\n      }\n      else\n      {\n        this.basicCards.push(this.shop[item]);\n      }\n    }\n  }\n\n  onPileClicked(cards: Card[]) {\n    this.gameService.onCardSelected(cards[0]);\n  }\n\n}\n","<div id= \"title\">\n  Shop<br>\n  <mat-divider></mat-divider>\n</div>\n<div id=\"container\">\n  <div id=\"basicCards\">\n    <app-card-pile *ngFor = \"let item of basicCards\" [location]=\"'Shop'\" [cards]=\"item\" [revealed] = \"true\" [orientation] =\"'bottom'\" (click)=\"onPileClicked(item)\"></app-card-pile>\n    <app-card-pile [cards]=\"trash\" [location]=\"'Trash'\" [showLocationLabel]=\"true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n  </div>\n  <div id=\"kingdomCards\">\n    <app-card-pile *ngFor = \"let item of kingdomCards\" [cards]=\"item\" [location]=\"'Shop'\" [revealed] = \"true\" [orientation] =\"'bottom'\" (click)=\"onPileClicked(item)\"></app-card-pile>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Game } from '../../../Common/src/game';\nimport { Player } from '../../../Common/src/player';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusService {\n\n  private status: string;\n  private statusSubject: Subject<string>;\n\n  constructor() {\n    status = '';\n    this.statusSubject = new Subject<string>();\n  }\n\n  public onStatusChanged = () => {\n    return this.statusSubject.asObservable();\n  }\n\n  public setStatus(newStatus: string) {\n    this.status = newStatus;\n    this.statusSubject.next(this.status);\n  }\n\n  public getStatus(): string {\n    return this.status;\n  }\n\n  public updateStatus(game: Game)\n  {\n    let status = '';\n    const currentPlayer: Player = game.players[game.currentPlayer];\n    if (currentPlayer !== undefined)\n    {\n      status += currentPlayer.name + '\\'s turn. ';\n      status += currentPlayer.state + ' phase';\n      this.setStatus(status);\n    }\n    else\n    {\n      this.setStatus('setting up game');\n    }\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}