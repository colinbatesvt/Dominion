{"version":3,"sources":["../Common/src/CardDefinitions/Moat.ts","../Common/src/CardDefinitions/Remodel.ts","../Common/src/CardDefinitions/cellar.ts","../Common/src/CardDefinitions/copper.ts","../Common/src/CardDefinitions/curse.ts","../Common/src/CardDefinitions/duchy.ts","../Common/src/CardDefinitions/estate.ts","../Common/src/CardDefinitions/gold.ts","../Common/src/CardDefinitions/market.ts","../Common/src/CardDefinitions/militia.ts","../Common/src/CardDefinitions/mine.ts","../Common/src/CardDefinitions/province.ts","../Common/src/CardDefinitions/silver.ts","../Common/src/CardDefinitions/smithy.ts","../Common/src/CardDefinitions/village.ts","../Common/src/CardDefinitions/woodcutter.ts","../Common/src/CardDefinitions/workshop.ts","../Common/src/action-card-definition.ts","../Common/src/card-definition.ts","../Common/src/card-library.ts","../Common/src/game.ts","../Common/src/player.ts","../Common/src/treasure-card-definition.ts","../Common/src/victory-card-definition.ts","./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/banner/banner.component.ts","./src/app/banner/banner.component.html","./src/app/card-pile/card-pile.component.ts","./src/app/card-pile/card-pile.component.html","./src/app/card/card.component.ts","./src/app/card/card.component.html","./src/app/game-over/game-over.component.ts","./src/app/game-over/game-over.component.html","./src/app/game.service.ts","./src/app/join-game/join-game.component.ts","./src/app/join-game/join-game.component.html","./src/app/play-game/play-game.component.ts","./src/app/play-game/play-game.component.html","./src/app/player/player.component.ts","./src/app/player/player.component.html","./src/app/setup-game/setup-game.component.ts","./src/app/setup-game/setup-game.component.html","./src/app/shop/shop.component.ts","./src/app/shop/shop.component.html","./src/app/status.service.ts","./src/environments/environment.ts","./src/main.ts","ws (ignored)"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { ActionCardDefinition, SubType } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Moat extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"moat\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 2;\r\n        this.subType = SubType.reaction;\r\n        this.imageName = \"moat.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 2 cards\r\n        player.draw(2);\r\n        // when another player plays an attack card you may first reveal this from your hand, to be unaffected by it.\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { Card } from \"../card\";\r\nimport { CardType } from \"../card-definition\";\r\nimport { CardLibrary } from \"../card-library\";\r\n\r\nexport class Remodel extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"remodel\";\r\n    private handPick: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 4;\r\n        this.imageName = \"remodel.jpg\";\r\n        this,this.handPick = true;\r\n    }\r\n\r\n    public execute(game: Game, player: Player) \r\n    {\r\n        // Trash a card from your hand gain a card costing up to 2 more than it\r\n        if(player.hand.length > 0)\r\n        {\r\n            const selection: UserSelection[] = [];\r\n            const trash: UserSelection = {location: Location.hand, isValid: (card: Card) => {return true;}, count: 1}\r\n            selection.push(trash)\r\n            player.pushSelection(selection, game);\r\n            player.status = \"Choose a card from your hand to trash\";\r\n            this.handPick = true;\r\n        }\r\n        else \r\n        {\r\n            game.finishExecution(this);\r\n        }\r\n    }\r\n\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        //if this is the trash selection...\r\n        if(this.handPick === true)\r\n        {\r\n            //selection should be a single card\r\n            const trashCard: Card = cards[0];\r\n            let handIndex = -1;\r\n            for(let i = 0; i < player.hand.length; i++)\r\n            {\r\n                const handCard: Card = player.hand[i];\r\n                if(handCard.id === trashCard.id)\r\n                {\r\n                    handIndex = i;\r\n                }\r\n            }\r\n            if(handIndex !== -1)\r\n            {\r\n                player.hand.splice(handIndex, 1);\r\n                game.trashCard(trashCard);\r\n                //remove this selection, add gain selection\r\n                player.popSelection();\r\n                const library: CardLibrary = new CardLibrary;\r\n                const maxBuy: Number = library.getCardDefinition(trashCard.name).cost + 2;\r\n                player.status = \"Gain a card from the shop costing up to \" + maxBuy;\r\n                const selection: UserSelection[] = [];\r\n                const gain: UserSelection = {location: Location.shop, isValid: (card: Card) => {\r\n                    return library.getCardDefinition(card.name).cost <= maxBuy;\r\n                }, count: 1}\r\n                selection.push(gain)\r\n                player.pushSelection(selection, game);\r\n                this.handPick = false;\r\n            }\r\n            else \r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else \r\n        {\r\n            //selection should be a single card\r\n            const gainCard: Card = cards[0];\r\n            //verify it's a card on top of it's shop pile\r\n            if(game.shop[gainCard.name][0].id === gainCard.id)\r\n            {\r\n                player.gain(Location.discard, gainCard);\r\n                game.shop[gainCard.name].splice(0, 1);\r\n                player.popSelection();\r\n                player.status = \"\";\r\n                game.finishExecution(this);\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, Location, UserSelection } from \"../player\";\r\nimport { CardType } from \"../card-definition\";\r\nimport { Card } from \"../card\";\r\n\r\nexport class Cellar extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"cellar\";\r\n    \r\n    public constructor() {\r\n        super();\r\n        this.cost = 2;\r\n        this.imageName = \"cellar.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 1 action\r\n        player.actions++;\r\n\r\n        //discard any number of cards, then draw that many\r\n        const pickDiscard: UserSelection = {location: Location.hand, isValid: (card: Card) => {return true;}, count: -1};\r\n        let selections: UserSelection[] = [];\r\n        selections.push(pickDiscard);\r\n\r\n        const prompts: string[] = [\"discard\"];\r\n        player.pushPrompt(prompts);\r\n        player.pushSelection(selections, game);\r\n        player.status = \"Choose any number of cards to discard\";\r\n    }\r\n\r\n    public onPrompt(prompt: string, game: Game, player: Player, cards: Card[]) : boolean\r\n    {\r\n        if(prompt === \"discard\")\r\n        {\r\n            // verify all these cards are actual cards in the user's hand\r\n            let bAllFound = true;\r\n            for(const card of cards)\r\n            {\r\n                let bFound = false;\r\n                for(const handCard of player.hand)\r\n                {\r\n                    if(card.id === handCard.id)\r\n                    {\r\n                        bFound = true;\r\n                    }\r\n                }\r\n                if(bFound !== true)\r\n                    bAllFound = false;\r\n            }\r\n\r\n            if(bAllFound !== true)\r\n            {\r\n                return false;\r\n            }\r\n            else\r\n            {\r\n                for(const card of cards)\r\n                {\r\n                    player.discardCard(card);\r\n                }\r\n\r\n                player.draw(cards.length);    \r\n                player.popSelection();\r\n                player.popPrompt();\r\n                game.finishExecution(this);\r\n                player.status = \"\";\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","import { TreasureCardDefinition } from \"../treasure-card-definition\";\r\n\r\nexport class Copper extends TreasureCardDefinition\r\n{\r\n    public static cardName: string = \"copper\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.coinValue = 1;\r\n        this.cost = 0;\r\n        this.startingAmount = 60;\r\n        this.isKingdom = false;\r\n        this.imageName = \"copper.jpg\";\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Curse extends VictoryCardDefinition\r\n{\r\n    public static cardName: string = \"curse\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 0; // Wow, this card is free? It must be the best!\r\n        this.startingAmount = 30;\r\n        this.isKingdom = false;\r\n        this.imageName = \"curse.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return -1;\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Duchy extends VictoryCardDefinition\r\n{\r\n    public static cardName: string = \"duchy\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 5;\r\n        this.startingAmount = 12;\r\n        this.isKingdom = false;\r\n        this.imageName = \"duchy.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return 3;\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Estate extends VictoryCardDefinition\r\n{\r\n\r\n    public static cardName: string = \"estate\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 2;\r\n        this.startingAmount = 24;\r\n        this.isKingdom = false;\r\n        this.imageName = \"estate.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return 1;\r\n    }\r\n}","import { TreasureCardDefinition } from \"../treasure-card-definition\";\r\n\r\nexport class Gold extends TreasureCardDefinition\r\n{\r\n    public static cardName: string = \"gold\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.coinValue = 3;\r\n        this.cost = 6;\r\n        this.startingAmount = 30;\r\n        this.isKingdom = false;\r\n        this.imageName = \"gold.jpg\";\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Market extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"market\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.isKingdom = true;\r\n        this.imageName = \"market.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        player.draw(1);\r\n        player.actions++;\r\n        player.buys++;\r\n        player.coins++;\r\n\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition, SubType } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { CardType } from \"../card-definition\";\r\nimport { Card } from \"../card\";\r\n\r\nexport class Militia extends ActionCardDefinition\r\n{\r\n    \r\n    public static cardName: string = \"militia\";\r\n    private playersDone: boolean[]; // used to track if users have discarded their cards\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 4;\r\n        this.subType = SubType.attack;\r\n        this.imageName = \"militia.jpg\";\r\n        this.playersDone = [];\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        player.coins += 2;\r\n        \r\n        this.playersDone = [];\r\n\r\n        //each other player discards down to 3 cards in hand\r\n        for(const attackedPlayer of game.players)\r\n        {\r\n            if(attackedPlayer.name !== player.name)\r\n            {\r\n                let bImmune = false;\r\n                for(const card of attackedPlayer.hand)\r\n                {\r\n                    // moat immunity, this should probably be a little more generic for futre reactions, but ya know...\r\n                    if(card.name === \"moat\")\r\n                    {\r\n                        bImmune = true;\r\n                        card.revealedToOthers = true;\r\n                    }\r\n                }\r\n                //immune, don't wait for their response\r\n                if(bImmune === true)\r\n                {\r\n                    this.playersDone.push(true);\r\n                }\r\n                else\r\n                {\r\n                    //not immune, but make sure they have more than three cards to discard\r\n                    if(attackedPlayer.hand.length > 3)\r\n                    {\r\n                        this.playersDone.push(false);\r\n                        const selection: UserSelection[] = [];\r\n                        const discard: UserSelection = {location: Location.hand, isValid: (card: Card) => {return true;}, count: attackedPlayer.hand.length - 3}\r\n                        selection.push(discard)\r\n                        attackedPlayer.pushSelection(selection, game);\r\n                        attackedPlayer.status = \"Discard down to 3 cards.\" \r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.playersDone.push(true);\r\n            }\r\n        }\r\n\r\n        let bAllDone = true;\r\n        for(const done of this.playersDone)\r\n        {\r\n            if(done === false)\r\n            {\r\n                bAllDone = false;\r\n            }\r\n        }\r\n\r\n        //no one to attack, clean up\r\n        if(bAllDone)\r\n            game.finishExecution(this);\r\n        else\r\n            player.status = \"Waiting for other players to discard\";\r\n    }\r\n    \r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        //make sure everything in the selection is in that players hand\r\n        let valid = true;\r\n        for(const card of cards)\r\n        {\r\n            let found = false;\r\n            for (const handCard of player.hand)\r\n            {\r\n                if(card.id === handCard.id)\r\n                {\r\n                    found = true;\r\n                }\r\n            }\r\n            if(found === false)\r\n            {\r\n                valid = false;\r\n            }\r\n        }\r\n\r\n        //if the selection was valid, discard the selected cards\r\n        if(valid === false)\r\n            return false;\r\n        else\r\n        {\r\n            for(const card of cards)\r\n            {\r\n                player.discardCard(card);\r\n            }\r\n        }\r\n\r\n        this.playersDone[player.index] = true;\r\n        player.popSelection();\r\n        player.status = \"\";\r\n\r\n        //see if everyone has discarded, and if they have, clean up\r\n        let bAllDone = true;\r\n        for(const done of this.playersDone)\r\n        {\r\n            if(done === false)\r\n            {\r\n                bAllDone = false;\r\n            }\r\n        }\r\n\r\n        if(bAllDone)\r\n        {\r\n            game.finishExecution(this);\r\n            game.players[game.currentPlayer].status = \"\";\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { Card } from \"../card\";\r\nimport { CardLibrary } from \"../card-library\";\r\nimport { CardType } from \"../card-definition\";\r\n\r\nexport class Mine extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"mine\";\r\n    private handPick: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 5;\r\n        this.imageName = \"mine.jpg\";\r\n        this.handPick = true;\r\n    }\r\n\r\n    public execute(game: Game, player: Player) \r\n    {\r\n        //you may trash a treasure from your hand. Gain a Treasure to your hand costing up to 3 more than it\r\n        //check if they have a treasure card to discard\r\n        let valid = false;\r\n        for(const card of player.hand)\r\n        {\r\n            if(card.type === CardType.treasure)\r\n                valid = true;\r\n        }\r\n        if(valid === true)\r\n        {\r\n            const selection: UserSelection[] = [];\r\n            const trash: UserSelection = {location: Location.hand, isValid: (card: Card) => {return card.type === CardType.treasure;}, count: 1}\r\n            selection.push(trash)\r\n            player.pushSelection(selection, game);\r\n            this.handPick = true;\r\n            player.status = \"Choose a treasure card from your hand to trash\"\r\n        }\r\n    }\r\n\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        //if this is the trash selection...\r\n        if(this.handPick === true)\r\n        {\r\n            //selection should be a single card\r\n            const trashCard: Card = cards[0];\r\n            let handIndex = -1;\r\n            for(let i = 0; i < player.hand.length; i++)\r\n            {\r\n                const handCard: Card = player.hand[i];\r\n                if(handCard.id === trashCard.id)\r\n                {\r\n                    handIndex = i;\r\n                }\r\n            }\r\n            if(handIndex !== -1)\r\n            {\r\n                player.hand.splice(handIndex, 1);\r\n                game.trashCard(trashCard);\r\n                //remove this selection, add gain selection\r\n                player.popSelection();\r\n\r\n                const selection: UserSelection[] = [];\r\n                const library: CardLibrary = new CardLibrary;\r\n                const maxBuy: Number = library.getCardDefinition(trashCard.name).cost + 3;\r\n                const gain: UserSelection = {location: Location.shop, isValid: (card: Card) => {\r\n                    return library.getCardDefinition(card.name).cost <= maxBuy;\r\n                }, count: 1}\r\n                selection.push(gain)\r\n                player.pushSelection(selection, game);\r\n                this.handPick = false;\r\n                player.status = \"Gain a treasure card costing up to \" + maxBuy;\r\n            }\r\n            else \r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else \r\n        {\r\n            //selection should be a single card\r\n            const gainCard: Card = cards[0];\r\n            //verify it's a card on top of it's shop pile\r\n            if(game.shop[gainCard.name][0].id === gainCard.id)\r\n            {\r\n                player.gain(Location.discard, gainCard);\r\n                game.shop[gainCard.name].splice(0, 1);\r\n                player.popSelection();\r\n                game.finishExecution(this);\r\n                player.status = \"\";\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { VictoryCardDefinition } from \"../victory-card-definition\";\r\n\r\nexport class Province extends VictoryCardDefinition\r\n{\r\n\r\n    public static cardName: string = \"province\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 8;\r\n        this.startingAmount = 12;\r\n        this.isKingdom = false;\r\n        this.imageName = \"province.jpg\";\r\n    }\r\n    \r\n    GetVictoryPoints(): number {\r\n        return 6;\r\n    }\r\n}","import { TreasureCardDefinition } from \"../treasure-card-definition\";\r\n\r\nexport class Silver extends TreasureCardDefinition\r\n{\r\n    public static cardName: string = \"silver\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.coinValue = 2;\r\n        this.cost = 3;\r\n        this.startingAmount = 40;\r\n        this.isKingdom = false;\r\n        this.imageName = \"silver.jpg\";\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Smithy extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"smithy\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 4;\r\n        this.imageName = \"smithy.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 3 cards\r\n        player.draw(3);\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Village extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"village\";\r\n    public constructor() {\r\n        super();\r\n        this.cost = 3;\r\n        this.imageName = \"village.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 1 card\r\n        player.draw(1);\r\n        // + 2 actions\r\n        player.actions += 2;\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Woodcutter extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"woodcutter\";\r\n    public constructor() {\r\n        super();\r\n        this.cost = 3;\r\n        this.imageName = \"woodcutter.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // + 1 buy\r\n        player.buys++;\r\n        // + 2 coins\r\n        player.coins += 2;\r\n\r\n        game.finishExecution(this);\r\n    }\r\n}","import { ActionCardDefinition } from \"../action-card-definition\";\r\nimport { Game } from \"../game\";\r\nimport { Player, UserSelection, Location } from \"../player\";\r\nimport { Card } from \"../card\";\r\nimport { CardLibrary } from \"../card-library\";\r\n\r\nexport class Workshop extends ActionCardDefinition\r\n{\r\n    public static cardName: string = \"workshop\";\r\n\r\n    public constructor() {\r\n        super();\r\n        this.cost = 3;\r\n        this.imageName = \"workshop.jpg\";\r\n    }\r\n\r\n    public execute(game: Game, player: Player) {\r\n        // gain a card costing up to 4\r\n\r\n        const selection: UserSelection[] = [];\r\n        const gain: UserSelection = {location: Location.shop, isValid: (card: Card) => {\r\n            const library: CardLibrary = new CardLibrary;\r\n            return library.getCardDefinition(card.name).cost <= 4;\r\n        }, count: 1}\r\n        selection.push(gain)\r\n        player.pushSelection(selection, game);\r\n        player.status = \"Gain a card costing up to 4\";\r\n    }\r\n\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n\r\n        const gainCard: Card = cards[0];\r\n\r\n        if(game.shop[gainCard.name][0].id === gainCard.id)\r\n        {\r\n            player.gain(Location.discard, gainCard);\r\n            game.shop[gainCard.name].splice(0, 1);\r\n            player.popSelection();\r\n            game.finishExecution(this);\r\n            player.status = \"\";\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { CardDefinition, CardType } from \"./card-definition\";\r\n\r\nexport enum SubType {\r\n    none = 'none',\r\n    attack = 'attack',\r\n    reaction = 'reaction'\r\n}\r\n\r\nexport abstract class ActionCardDefinition extends CardDefinition {\r\n\r\n    public subType: SubType;\r\n\r\n    constructor() {\r\n        super();\r\n        this.isKingdom = true;\r\n        this.subType = SubType.none;\r\n        this.startingAmount = 10;\r\n        this.cardType = CardType.action;\r\n    }\r\n}","import { Card } from \"./card\";\r\nimport { Player } from \"./player\";\r\nimport { Game } from \"./game\";\r\n\r\nexport enum CardType {\r\n    any = 0,\r\n    action,\r\n    victory,\r\n    treasure\r\n};\r\n\r\nexport abstract class CardDefinition{\r\n\r\n    public static cardName: string;\r\n\r\n    imageName : string = \"\";\r\n    cost: number;\r\n    startingAmount: number;\r\n    isKingdom: boolean;\r\n    cardType: CardType;\r\n\r\n    constructor() {\r\n        this.cost = 0;\r\n        this.startingAmount = 0;\r\n        this.isKingdom = true;\r\n        this.cardType = CardType.action;\r\n    }\r\n\r\n    public getCard(id: number): Card{\r\n        const card: Card = {\r\n            id: id,\r\n            imageName: this.GetImageName(),\r\n            name: (<typeof CardDefinition> this.constructor).cardName, //yuck, but this is the only way as far as I can tell\r\n            isKingdom: this.isKingdom,\r\n            type: this.cardType,\r\n            revealedToOthers: false\r\n        };\r\n        \r\n        return card;\r\n    }\r\n\r\n    public getCardName(): string{\r\n        return (<typeof CardDefinition> this.constructor).cardName\r\n    }\r\n\r\n    public GetImageName() : string {\r\n        return this.imageName;\r\n    }\r\n\r\n    //execute the card's behaviour, this should be overriden by concrete subclasses that have behaviour on the card being played\r\n    public execute(game: Game, player: Player) {\r\n\r\n    }\r\n\r\n    //for cards that require the user to select something, they can override this\r\n    public onSelection(game: Game, player: Player, cards: Card[]) : boolean{\r\n        return true;\r\n    }\r\n\r\n    public onPrompt(prompt: string, game: Game, player: Player, cards: Card[]) : boolean{\r\n        return true;\r\n    }\r\n}","import { CardDefinition } from \"./card-definition\";\r\nimport { Copper } from \"./CardDefinitions/copper\";\r\nimport { Card } from \"./card\";\r\nimport { Silver } from \"./CardDefinitions/silver\";\r\nimport { Gold } from \"./CardDefinitions/gold\";\r\nimport { Estate } from \"./CardDefinitions/estate\";\r\nimport { Duchy } from \"./CardDefinitions/duchy\";\r\nimport { Province } from \"./CardDefinitions/province\";\r\nimport { Curse } from \"./CardDefinitions/curse\";\r\nimport { Cellar } from \"./CardDefinitions/cellar\";\r\nimport { Workshop } from \"./CardDefinitions/workshop\";\r\nimport { Market } from \"./CardDefinitions/market\";\r\nimport { Militia } from \"./CardDefinitions/militia\";\r\nimport { Mine } from \"./CardDefinitions/mine\";\r\nimport { Moat } from \"./CardDefinitions/Moat\";\r\nimport { Remodel } from \"./CardDefinitions/Remodel\";\r\nimport { Smithy } from \"./CardDefinitions/smithy\";\r\nimport { Village } from \"./CardDefinitions/village\";\r\nimport { Woodcutter } from \"./CardDefinitions/woodcutter\";\r\n\r\nexport class CardLibrary {\r\n\r\n    private cardIndex: Record<string, CardDefinition>; //map of card names to card definitions\r\n    private nextCardId: number;\r\n    private presetIndex: Record<string, string[]>; // map of preset names to card names in that preset\r\n\r\n    constructor() {\r\n        this.nextCardId = 0;\r\n\r\n        this.cardIndex = {};\r\n        // basic cards\r\n        this.cardIndex[Copper.cardName] = new Copper();\r\n        this.cardIndex[Silver.cardName] = new Silver();\r\n        this.cardIndex[Gold.cardName] = new Gold();\r\n        this.cardIndex[Estate.cardName] = new Estate();\r\n        this.cardIndex[Duchy.cardName] = new Duchy();\r\n        this.cardIndex[Province.cardName] = new Province();\r\n        this.cardIndex[Curse.cardName] = new Curse();\r\n\r\n        // actions\r\n        this.cardIndex[Cellar.cardName] = new Cellar();\r\n        this.cardIndex[Market.cardName] = new Market();\r\n        this.cardIndex[Militia.cardName] = new Militia();\r\n        this.cardIndex[Mine.cardName] = new Mine();\r\n        this.cardIndex[Moat.cardName] = new Moat();\r\n        this.cardIndex[Remodel.cardName] = new Remodel();\r\n        this.cardIndex[Smithy.cardName] = new Smithy();\r\n        this.cardIndex[Village.cardName] = new Village();\r\n        this.cardIndex[Woodcutter.cardName] = new Woodcutter();\r\n        this.cardIndex[Workshop.cardName] = new Workshop();\r\n\r\n        // presets\r\n        this.presetIndex = {};\r\n        this.presetIndex['First Game'] = [\r\n            Cellar.cardName,\r\n            Market.cardName,\r\n            Militia.cardName,\r\n            Mine.cardName,\r\n            Moat.cardName,\r\n            Remodel.cardName,\r\n            Smithy.cardName,\r\n            Village.cardName,\r\n            Woodcutter.cardName,\r\n            Workshop.cardName];\r\n    }\r\n\r\n    public getAllCards() : Card[]\r\n    {\r\n       const cards: Card[] = [];\r\n       for(let card in this.cardIndex)\r\n       {\r\n           cards.push(this.cardIndex[card].getCard(this.nextCardId))\r\n           this.nextCardId++;\r\n       }\r\n\r\n       return cards;\r\n    }\r\n\r\n    public getCard(cardName: string): Card | null {\r\n        if(this.cardIndex[cardName] !== undefined)\r\n        {\r\n            const card: Card = this.cardIndex[cardName].getCard(this.nextCardId);\r\n            this.nextCardId++;\r\n            return card;\r\n        }\r\n        else\r\n            return null;\r\n    }\r\n\r\n    public getCardDefinition(cardName: string) {\r\n        return this.cardIndex[cardName];\r\n    }\r\n\r\n    public getBasicCardNames() : string[]\r\n    {\r\n       const cards: string[] = [];\r\n       for(let card in this.cardIndex)\r\n       {\r\n           if (!this.cardIndex[card].isKingdom)\r\n           {\r\n                cards.push(this.cardIndex[card].getCardName());\r\n           }\r\n       }\r\n\r\n       return cards;\r\n    }\r\n\r\n    public getPresetNames(): string[]\r\n    {\r\n        return Object.keys(this.presetIndex);\r\n    }\r\n\r\n    public getPresetCardNames(preset: string) : string[]\r\n    {\r\n        return this.presetIndex[preset];\r\n    }\r\n}","import { Player, Location, PlayerState, HumanPlayer, AIPlayer, UserSelection } from \"./player\";\r\nimport { Card } from \"./card\";\r\nimport { CardLibrary } from \"./card-library\";\r\nimport { CardDefinition, CardType } from \"./card-definition\";\r\nimport { Estate } from \"./CardDefinitions/estate\";\r\nimport { Copper } from \"./CardDefinitions/copper\";\r\nimport { ServerInterface } from \"./server-interface\";\r\nimport { Province } from \"./CardDefinitions/province\";\r\n\r\nexport enum GameState {\r\n    Setup = 'setup',\r\n    PlayGame = 'play',\r\n    GameOver = 'over'\r\n};\r\n\r\nexport class Game {\r\n    public state: GameState;\r\n    public name: string;\r\n    public players: Player[];\r\n    public currentPlayer: number;\r\n    public shop: Record<string, Card[]>;\r\n    public trash: Card[];\r\n\r\n    public setupSelectedCards: string[];\r\n    public setupPreset: string;\r\n\r\n    public library: CardLibrary;\r\n    public executingCards: CardDefinition[];\r\n\r\n    constructor(gameName: string, serverCallback: (game: Game) => void) {\r\n        this.name = gameName;\r\n        this.state = GameState.Setup;\r\n        this.players = [];\r\n        this.currentPlayer = -1;\r\n        this.shop = {};\r\n        this.trash = [];\r\n\r\n        this.setupSelectedCards = [];\r\n        this.setupPreset = '';\r\n\r\n        this.library = new CardLibrary;\r\n        this.executingCards = [];\r\n    }\r\n\r\n    public setGameState(newState: GameState)\r\n    {\r\n        this.state = newState;\r\n    }\r\n\r\n    public removePlayer(remove: Player)\r\n    {\r\n        const index: number = this.players.indexOf(remove);\r\n        this.players.splice(index, 1);\r\n    }\r\n\r\n    // does this game have any active players\r\n    public hasNoActivePlayers() : boolean {\r\n       let noActivePlayers: boolean = true;\r\n       for(const player of this.players)\r\n       {\r\n           if(player instanceof HumanPlayer)\r\n           {\r\n               const humanPlayer: HumanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.connected)\r\n                    noActivePlayers = false;\r\n           }\r\n       }\r\n       return noActivePlayers;\r\n    }\r\n\r\n    public findPlayerById(socketId: any) : Player | undefined\r\n    {\r\n        for (const player of this.players)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer: HumanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.socketId === socketId)\r\n                    return player;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public findPlayerByName(playerName: string) : Player | undefined\r\n    {\r\n        for (const player of this.players)\r\n        {\r\n            if(player.name === playerName)\r\n                return player;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    //returns an error message or blank string on success\r\n    public playerJoin(playerName: string, playerColor: string, socketId : any) : string {\r\n        \r\n          // check for reconnect\r\n        for(const player of this.players)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.name === playerName)\r\n                {\r\n                    if(humanPlayer.connected !== true)\r\n                    {\r\n                        humanPlayer.socketId = socketId;\r\n                        humanPlayer.SetConnected(true);\r\n                        console.log(humanPlayer.name + ' reconnected. Socket ID = ' + socketId);\r\n                        return \"\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        //game better not be already going\r\n        if(this.state !== GameState.Setup)\r\n        {\r\n            return \"Unable to join game, game is already in progress\";\r\n        }\r\n\r\n        //only 4 players  in dominion\r\n        if(this.players.length >= 4)\r\n        {\r\n              return \"Unable to join game, player limit reached\";\r\n        }\r\n        \r\n        for(const player of this.players)\r\n        {\r\n            //player names have to be unique\r\n            if(player.name === playerName)\r\n            {\r\n                return \"There is already a player in the selected game with that name\";\r\n            }\r\n            \r\n            // player colors have to be unique\r\n            if(player.color === playerColor)\r\n            {\r\n               return \"There is already a player in the selected game with that favorite color\";\r\n            }\r\n        }\r\n\r\n        //we got past all the checks, let the new guy in\r\n        let newPlayer: HumanPlayer = new HumanPlayer(playerName, playerColor, socketId, this.players.length);\r\n        this.players.push(newPlayer);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public playerLeave(playerIndex: number) : string\r\n    {\r\n        if(playerIndex < this.players.length)\r\n        {\r\n            this.players.splice(playerIndex, 1);\r\n        }\r\n        else{\r\n            return \"invalid index\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    //returns an error message or blank string on success\r\n    public addBot(botName: string) : string\r\n    {\r\n        //disable bots for now, getting this to work with socketio is going to be complicated\r\n        return \"\";\r\n        /*\r\n        const foundPlayer: Player | undefined = this.findPlayerByName(botName);\r\n\r\n        //name needs to be unique\r\n        if(foundPlayer !== undefined)\r\n        {\r\n           return \"there is already a player in the game with that name\";\r\n        }\r\n\r\n        //game better not be already going\r\n        if(this.state !== GameState.Setup)\r\n        {\r\n            return \"Unable to join game, game is already in progress\";\r\n        }\r\n\r\n        //only 4 players  in dominion\r\n        if(this.players.length >= 4)\r\n        {\r\n            return \"Unable to join game, player limit reached\";\r\n        }\r\n\r\n        let bColorTaken = true;\r\n        let color: string = \"\";\r\n        while(bColorTaken)\r\n        {  \r\n            color = this.getRandomColor();\r\n            for(const player of this.players)\r\n            {\r\n                // color is taken, find a different one\r\n                if(player.color === color)\r\n                    continue;\r\n            }\r\n            bColorTaken = false;\r\n        }\r\n\r\n        const bot: AIPlayer = new AIPlayer(botName, color, this.players.length, this);\r\n        this.players.push(bot);\r\n        console.log(\"added bot: \" + botName);\r\n        return \"\";\r\n        */\r\n    }\r\n\r\n    public getRandomColor() : string{\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n      }\r\n\r\n    // keep track of which cards are selected during the setup step\r\n    public setupSelectCard(cardName: string)\r\n    {\r\n        // select a card, or deselect it if it's already selected\r\n\r\n        const index: number = this.setupSelectedCards.indexOf(cardName);\r\n        if(index == -1)\r\n        {\r\n            // only 10 kingdom cards can be selected at a time\r\n            if(this.setupSelectedCards.length < 10 )\r\n            {\r\n                this.setupSelectedCards.push(cardName);\r\n                \r\n                // once you change the selected cards, that preset is no longer selected\r\n                this.setupPreset = '';\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.setupSelectedCards.splice(index, 1);\r\n\r\n            // once you change the selected cards, that preset is no longer selected\r\n            this.setupPreset = '';\r\n        }\r\n    }\r\n\r\n    public setupSelectPreset(presetName: string) : boolean\r\n    {\r\n        const presetCardNames: string[] = this.library.getPresetCardNames(presetName);\r\n        if(presetCardNames !== undefined)\r\n        {\r\n            this.setupPreset = presetName;\r\n            this.setupSelectedCards = [];\r\n            for(const cardName of presetCardNames)\r\n            {\r\n                this.setupSelectedCards.push(cardName);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // toggle whether the player is ready or not\r\n    public setupPlayerReady(playerName: string) : boolean {\r\n        const player: Player | undefined = this.findPlayerByName(playerName);\r\n    \r\n        if(player !== undefined)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer : HumanPlayer = player as HumanPlayer;\r\n                humanPlayer.setupReady = !player.setupReady;\r\n            }\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n    public setupStartGame() : boolean {\r\n\r\n        // all humasn players must be ready\r\n        for(const player of this.players)\r\n        {\r\n            if(player instanceof HumanPlayer)\r\n            {\r\n                const humanPlayer : HumanPlayer = player as HumanPlayer;\r\n                if(humanPlayer.setupReady === false)\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        // we need 10 kingdom cards\r\n        if(this.setupSelectedCards.length !== 10)\r\n            return false;\r\n\r\n        // time to setup the game!\r\n        // distribute cards to the shop\r\n        const basicCards: string[] = this.library.getBasicCardNames();\r\n\r\n        for(const basicCard of basicCards)\r\n        {\r\n            this.shop[basicCard] = [];\r\n            const definition : CardDefinition = this.library.getCardDefinition(basicCard);\r\n            for (let i = 0; i < definition.startingAmount; i++) \r\n            {\r\n                const newCard: Card | null = this.library.getCard(basicCard);\r\n\r\n                if(newCard !== null)\r\n                    this.shop[basicCard].push(newCard);\r\n            }\r\n        }\r\n\r\n        for(const kingdomCard of this.setupSelectedCards)\r\n        {\r\n            this.shop[kingdomCard] = [];\r\n            const definition : CardDefinition = this.library.getCardDefinition(kingdomCard);\r\n            for (let i = 0; i < definition.startingAmount; i++) \r\n            {\r\n                const newCard: Card | null = this.library.getCard(kingdomCard);\r\n\r\n                if(newCard !== null)\r\n                    this.shop[kingdomCard].push(newCard);\r\n            }\r\n        }\r\n\r\n        for(const player of this.players)\r\n        {\r\n            //add 3 estates\r\n            for(let i = 0; i < 3; i++)\r\n            {\r\n                const estate: Card | undefined = this.shop[Estate.cardName].pop();\r\n                if(estate !== undefined)\r\n                {\r\n                    player.gain(Location.deck, estate);\r\n                }\r\n            }\r\n\r\n            //add 7 coppers\r\n            for(let i = 0; i < 7; i++)\r\n            {\r\n                const estate: Card | undefined = this.shop[Copper.cardName].pop();\r\n                if(estate !== undefined)\r\n                {\r\n                    player.gain(Location.deck, estate);\r\n                }\r\n            }\r\n\r\n            // now that we have our starting deck, shuffle and draw 5\r\n            player.shuffle();\r\n\r\n            player.draw(5);\r\n        }\r\n\r\n        // pick a starting player\r\n        \r\n        this.currentPlayer = Math.floor(Math.random() * this.players.length);\r\n        \r\n        this.players[this.currentPlayer].actions= 1;\r\n        this.players[this.currentPlayer].buys = 1;\r\n        this.players[this.currentPlayer].coins = 0;\r\n\r\n        this.shop[Province.cardName].splice(1, 8);\r\n\r\n        /* for testing game over\r\n        for(const player of this.players)\r\n        {\r\n            const victoryCards = Math.floor(Math.random() * 10);\r\n            for(let i = 0; i < victoryCards; i++)\r\n            {\r\n                const card: Card | null = this.library.getCard(\"estate\");\r\n                if(card !== null)\r\n                {\r\n                    player.deck.push(card);\r\n                }\r\n            }\r\n        }\r\n        */\r\n\r\n        this.setGameState(GameState.PlayGame);\r\n        return true;\r\n    }\r\n\r\n    public trashCard(card: Card) {\r\n        this.trash.unshift(card);\r\n    }\r\n    \r\n\r\n    public advanceGame() {\r\n\r\n        let waitingForPlayer = false;\r\n        \r\n        while(waitingForPlayer === false) \r\n        {\r\n            let currentPlayer: Player = this.players[this.currentPlayer];\r\n\r\n            //get ready of anything currently executing\r\n            for(let i = this.executingCards.length - 1; i >= 0; i--)\r\n            {\r\n                const card: CardDefinition = this.executingCards[i];\r\n                this.finishExecution(card);\r\n            }\r\n\r\n            // they are still waiting, give them something to do\r\n            if(currentPlayer.state === PlayerState.WaitingForTurn)\r\n            {\r\n                currentPlayer.setState(PlayerState.Action, this);\r\n            }\r\n\r\n            else if (currentPlayer.state === PlayerState.Action)\r\n            {\r\n                currentPlayer.setState(PlayerState.Buy, this);\r\n            }\r\n\r\n            else if (currentPlayer.state === PlayerState.Buy)\r\n            { \r\n                currentPlayer.setState(PlayerState.CleanUp, this);\r\n\r\n            }\r\n\r\n            else if (currentPlayer.state === PlayerState.CleanUp)\r\n            {\r\n                //nothing for user/AI to do, just auto clean up\r\n                currentPlayer.cleanUp();\r\n                currentPlayer.setState(PlayerState.WaitingForTurn, this);\r\n                this.currentPlayer = (this.currentPlayer + 1) % this.players.length;// after clean up, move to the next player\r\n                currentPlayer = this.players[this.currentPlayer];\r\n                //you get 1 action, 1 buy, and no coins to start your turn\r\n                currentPlayer.setState(PlayerState.Action, this);\r\n                currentPlayer.actions= 1;\r\n                currentPlayer.buys = 1;\r\n                currentPlayer.coins = 0;\r\n            }\r\n\r\n            currentPlayer.addStateActions(this);\r\n\r\n            //if we need to wait for huiman action, get out of here\r\n            if(currentPlayer.userSelections.length > 0 && currentPlayer instanceof HumanPlayer)\r\n                waitingForPlayer = true;\r\n        }\r\n    }\r\n\r\n    public checkGameOver(): boolean {\r\n        let gameOver = false;\r\n        if(this.shop[Province.cardName].length === 0)\r\n            gameOver = true;\r\n        else\r\n        {\r\n            let empty = 0;\r\n            for(const card in this.shop)\r\n            {\r\n                if(this.shop[card].length === 0)\r\n                    empty++;\r\n            }\r\n            if(empty >= 3)\r\n                gameOver = true;\r\n        }\r\n\r\n        return gameOver;\r\n    }\r\n\r\n    //a player chose something, decide what to do with it\r\n    onCardsSelected(playerIndex: number, cards: Card[]): boolean\r\n    {\r\n        const player: Player = this.players[playerIndex];\r\n\r\n        let validSelection = false;\r\n        const currentSelections: UserSelection[] = player.userSelections[player.userSelections.length - 1];\r\n        for(const selection of currentSelections)\r\n        {\r\n            let allCardsValid = true;\r\n            for(const card of cards)\r\n            {\r\n                if(selection.isValid(card) === false)\r\n                {\r\n                    allCardsValid = false;\r\n                }\r\n            }\r\n\r\n            if(allCardsValid === true)\r\n                validSelection = true;\r\n        }\r\n\r\n        //cards not valid\r\n        if(validSelection === false)\r\n            return false;\r\n\r\n        //if there's an executing card, it gets the selection\r\n        if(this.executingCards.length > 0)\r\n        {\r\n            if(this.executingCards[this.executingCards.length - 1].onSelection(this, player, cards) === false)\r\n                return false;\r\n        }\r\n        //determine what to do with the selection based on turn phase\r\n        else if(player.state == PlayerState.Action)\r\n        {\r\n            if(cards.length > 0 && player.actions > 0)\r\n            {\r\n                //1 card selected at a time\r\n                const card: Card = cards[0];\r\n\r\n                //card better be in your hand\r\n                for(const handCard of player.hand)\r\n                {\r\n                    if(handCard.id === card.id && card.type === CardType.action)\r\n                    {\r\n                        //the user chose to play this action card\r\n                        const cardDefinition: CardDefinition = this.library.getCardDefinition(card.name);\r\n\r\n                        if(cardDefinition.cardType === CardType.action)\r\n                        {\r\n                            this.executingCards.push(cardDefinition);\r\n                            player.actions--;\r\n\r\n                            //remove card from hand, put it in play\r\n                            let index = -1;\r\n                            for(let i = 0; i < player.hand.length; i++)\r\n                            {\r\n                                if(player.hand[i].id === card.id)\r\n                                    index = i;\r\n                            }\r\n                            player.hand.splice(index, 1);\r\n                            player.inPlay.unshift(card);\r\n\r\n                            cardDefinition.execute(this, player);\r\n                        }\r\n                        else\r\n                        {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if(player.state == PlayerState.Buy && player.buys > 0)\r\n        {\r\n            if(cards.length > 0)\r\n            {\r\n                //1 card selected at a time\r\n                const card: Card = cards[0];\r\n\r\n                //if this is a card in the players hand, and it's a treasure card, play it\r\n                for(const handCard of player.hand)\r\n                {\r\n                    if(handCard.id === card.id && card.type === CardType.treasure)\r\n                    {\r\n                        const treasureCardDefinition : CardDefinition = this.library.getCardDefinition(card.name);\r\n                        this.executingCards.push(treasureCardDefinition);\r\n\r\n                        //remove card from hand, put it in play\r\n                        let index = -1;\r\n                        for(let i = 0; i < player.hand.length; i++)\r\n                        {\r\n                        if(player.hand[i].id === card.id)\r\n                            index = i;\r\n                        }\r\n                        player.hand.splice(index, 1);\r\n                        player.inPlay.unshift(card);\r\n\r\n                        treasureCardDefinition.execute(this, player);\r\n                    }\r\n                }\r\n\r\n                //if this is a card in the shop, buy it\r\n                //we know the card is in the shop if it is the top card of it's buy pile\r\n                if(this.shop[card.name][0].id === card.id)\r\n                {\r\n                    const cost: number = this.library.getCardDefinition(card.name).cost;\r\n\r\n                    if(player.coins >= cost)\r\n                    {\r\n                        this.shop[card.name].splice(0, 1);\r\n                        player.gain(Location.discard, card);\r\n                        player.coins -= cost;\r\n                        player.buys--;\r\n                    }\r\n                    else \r\n                    {\r\n                        return false;\r\n                    }\r\n\r\n                    //the game always ends after buying something, so check if it's over here\r\n                    if(this.checkGameOver())\r\n                    {\r\n                         //Game Over! show the end screen\r\n                        this.state = GameState.GameOver;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onPromptClicked(playerIndex: number, prompt: string, cards: Card[]) {\r\n        \r\n        if(this.executingCards.length > 0)\r\n        {\r\n            if(this.executingCards[this.executingCards.length - 1].onPrompt(prompt, this, this.players[playerIndex], cards) === true)\r\n                return;\r\n        }\r\n        if(prompt == 'done')\r\n        {\r\n            this.advanceGame();\r\n        }\r\n    }\r\n\r\n    //called by a card definition when execution is finished\r\n    finishExecution(finishing: CardDefinition) {\r\n        const current: CardDefinition = this.executingCards[this.executingCards.length - 1];\r\n\r\n        // this better be the same card, things can't finish out of order\r\n        if(current.getCardName() === finishing.getCardName())\r\n        {\r\n            this.executingCards.splice(this.executingCards.length - 1, 1);\r\n        }\r\n\r\n        else\r\n        {\r\n            console.log('ERROR: cards finished executing out of order');\r\n            return;\r\n        }\r\n    }\r\n}","import { Card } from \"./card\";\r\nimport { CardType } from \"./card-definition\";\r\nimport { CardLibrary } from \"./card-library\";\r\nimport { Game } from \"./game\";\r\n\r\nexport enum Location {\r\n    deck = 0,\r\n    revealed,\r\n    hand,\r\n    inPlay,\r\n    discard,\r\n    shop\r\n}\r\n\r\nexport enum PlayerState {\r\n    Action = \"action\",\r\n    Buy = \"buy\",\r\n    CleanUp = \"clean-up\",\r\n    WaitingForTurn= \"waiting\"\r\n}\r\n\r\nexport interface UserSelection {\r\n    location: Location;\r\n    isValid: (card:Card) => boolean; //function that returns whether a given card can be added to the selection\r\n    count: number\r\n}\r\n\r\nexport abstract class Player {\r\n\r\n    private library: CardLibrary;\r\n\r\n    public name: string;\r\n    public index: number; // index within game's player array\r\n    public color: string;\r\n\r\n    public state: PlayerState;\r\n    public setupReady: boolean;\r\n\r\n    public deck: Card[];\r\n    public revealed: Card[];\r\n    public hand: Card[];\r\n    public inPlay: Card[];\r\n    public discard: Card[];\r\n\r\n    public actions: number;\r\n    public buys: number;\r\n    public coins: number;\r\n    public userPrompts: string[][]; // this is a stack of arrays of strings. Describes prompts display ed to the user on status bar buttons\r\n\r\n    public userSelections: UserSelection[][]; // this is a stack of arrays that describe what the user can select right now\r\n\r\n    public status: string;\r\n\r\n    constructor(playerName: string, playerColor: string, index: number)\r\n    {\r\n        this.library = new CardLibrary;\r\n\r\n        this.name = playerName;\r\n        this.index = index;\r\n        this.color = playerColor;\r\n        this.state = PlayerState.WaitingForTurn;\r\n        this.setupReady = false;\r\n\r\n        this.deck = [];\r\n        this.revealed = [];\r\n        this.hand = [];\r\n        this.inPlay = [];\r\n        this.discard = [];\r\n\r\n        this.actions = 0;\r\n        this.buys = 0;\r\n        this.coins = 0;\r\n\r\n        this.userSelections = [];\r\n        this.userPrompts = [];\r\n\r\n        this.status = \"\";\r\n    }\r\n\r\n\r\n    public gain(location: Location, card: Card)\r\n    {\r\n        switch(location)\r\n        {\r\n            case Location.deck:\r\n                this.deck.push(card);\r\n                break;\r\n\r\n            case Location.hand:\r\n                this.hand.push(card);\r\n                break;\r\n\r\n            case Location.discard:\r\n                this.discard.unshift(card); //add to front of discard so player can see it\r\n                break;\r\n        }\r\n    }\r\n\r\n    public draw(drawCount: Number) {\r\n        for(let i = 0; i < drawCount; i++)\r\n        {\r\n            if(this.deck.length > 0)\r\n            {\r\n                const card: Card | undefined = this.deck.pop();\r\n                if(card !== undefined) {\r\n                    this.hand.push(card);\r\n                }\r\n            }\r\n            //no cards in deck, move cards from discard to deck\r\n            else \r\n            {\r\n                while(this.discard.length > 0)\r\n                {\r\n                    const discardCard: Card | undefined = this.discard.pop();\r\n                    if(discardCard !== undefined)\r\n                        this.deck.push(discardCard);\r\n                }\r\n\r\n                // shuffle, then draw if we have a deck\r\n                this.shuffle();\r\n\r\n                if(this.deck.length > 0)\r\n                {\r\n                    const card: Card | undefined = this.deck.pop();\r\n                    if(card !== undefined) {\r\n                        this.hand.push(card);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public shuffle() {\r\n        // perform a fisher-yates shuffle on the deck array\r\n        // this is done by swapping each element of the array with a random previous element\r\n        for (let i = this.deck.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n        \r\n            [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];\r\n        }\r\n    }\r\n\r\n    public discardCard(card: Card)\r\n    {\r\n        for(let i = 0; i < this.hand.length; i++)\r\n        {\r\n            if(this.hand[i].id === card.id)\r\n            {\r\n                this.hand.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.discard.push(card);\r\n    }\r\n\r\n    //execute the clean up phase\r\n    public cleanUp() {\r\n\r\n        //move revealed into discard (prob shouldn't be any at this point...)\r\n        while(this.revealed.length > 0)\r\n        {\r\n            const card : Card = this.revealed[0];\r\n            this.revealed.splice(0, 1);\r\n\r\n            this.discard.push(card);\r\n        }\r\n\r\n        //move hand into discard\r\n        while(this.hand.length > 0)\r\n        {\r\n            const card : Card = this.hand[0];\r\n            card.revealedToOthers = false;\r\n            this.hand.splice(0, 1);\r\n\r\n            this.discard.push(card);\r\n        }\r\n\r\n        //move in play into discard\r\n        while(this.inPlay.length > 0)\r\n        {\r\n            const card : Card = this.inPlay[0];\r\n            card.revealedToOthers = false;\r\n            this.inPlay.splice(0, 1);\r\n\r\n            this.discard.push(card);\r\n        }\r\n\r\n        //draw a new hand\r\n        this.draw(5);\r\n\r\n        //reset values\r\n        this.actions = 0;\r\n        this.buys = 0;\r\n        this.coins = 0;\r\n    }\r\n\r\n    //how many cards of the given type are in our hand?\r\n    public typeAmountInHand(type: CardType) : number {\r\n        let count: number = 0;\r\n\r\n        //if the current player has actions left, but no action cards in their hand, move to buy phase\r\n        for(let card of this.hand)\r\n        {\r\n            if(this.library.getCardDefinition(card.name).cardType == CardType.action)\r\n                count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    //set the current state, and set what kind of card we want the user to pick\r\n    public setState(state: PlayerState, game: Game){\r\n        this.state = state;\r\n\r\n        //when moving to a new phase, we start fresh\r\n        this.userSelections = [];\r\n        this.userPrompts = [];\r\n    }\r\n\r\n    public addStateActions(game: Game)\r\n    {\r\n        // tell the user what we're looking for\r\n        if(this.state === PlayerState.WaitingForTurn)\r\n        {\r\n            //nothing to pick\r\n        }\r\n        else if(this.state === PlayerState.Action)\r\n        {\r\n            //in the action phase you choose actions to play from your hand\r\n            const actionPhaseSelections: UserSelection[] = [];\r\n            const pickAction : UserSelection = { location: Location.hand, isValid: (card: Card) => {return card.type === CardType.action;}, count: 1};\r\n            actionPhaseSelections.push(pickAction);\r\n\r\n            this.userPrompts.push(['done']);\r\n            this.pushSelection(actionPhaseSelections, game);\r\n        }\r\n        else if (this.state === PlayerState.Buy)\r\n        {\r\n            //in the buy phase you can play treasure cards to get more coins, and use coins to buy from the shop\r\n            const buyPhaseSelections: UserSelection[] = [];\r\n            const pickTreasure : UserSelection = { location: Location.hand, isValid: (card: Card) => {return card.type === CardType.treasure;}, count: 1};\r\n            const pickShop : UserSelection = { location: Location.shop, isValid: (card: Card) => {return true;}, count: 1};\r\n            buyPhaseSelections.push(pickTreasure);\r\n            buyPhaseSelections.push(pickShop);\r\n\r\n            this.userPrompts.push(['done']);\r\n            this.pushSelection(buyPhaseSelections, game);\r\n        }\r\n        else if(this.state === PlayerState.CleanUp)\r\n        {\r\n            //nothing to pick\r\n        }\r\n    }\r\n\r\n    public pushSelection(selection: UserSelection[], game: Game)\r\n    {\r\n        this.userSelections.push(selection);\r\n\r\n        //if we give the AI a selection, just do it\r\n        if(this instanceof AIPlayer)\r\n        {\r\n            const ai: AIPlayer = this as AIPlayer;\r\n            ai.doCurrentSelection(game);\r\n        }\r\n    }\r\n\r\n    public popSelection() : UserSelection[] {\r\n        const popped: UserSelection[] = this.userSelections[this.userSelections.length-1];\r\n        this.userSelections.splice(this.userSelections.length-1, 1);\r\n        return popped;\r\n    }\r\n\r\n    public pushPrompt(prompts: string[]) \r\n    {\r\n        this.userPrompts.push(prompts);\r\n    }\r\n\r\n    public popPrompt() : string[] {\r\n        const popped: string[] = this.userPrompts[this.userPrompts.length-1];\r\n        this.userPrompts.splice(this.userPrompts.length -1, 1);\r\n        return popped;\r\n    }\r\n}\r\n\r\nexport class HumanPlayer extends Player{\r\n\r\n    public socketId: any;\r\n    public connected: boolean;\r\n\r\n    constructor(playerName: string, playerColor: string, socketId: any, index: number) {\r\n        super(playerName, playerColor, index);\r\n        this.socketId = socketId;\r\n        this.connected = true;\r\n        this.setupReady = false;\r\n    }\r\n    \r\n    public SetConnected(connected: boolean)\r\n    {\r\n        this.connected = connected;\r\n    }\r\n}\r\n\r\nexport class AIPlayer extends Player{\r\n\r\n    constructor(playerName: string, playerColor: string, index: number, game: Game) {\r\n        super(playerName, playerColor, index);\r\n        this.setupReady = true;\r\n        // this.game = game;\r\n    }\r\n\r\n    //ugly sleep, yuck\r\n    public wait(ms: number){\r\n        var start = new Date().getTime();\r\n        var end = start;\r\n        while(end < start + ms) {\r\n          end = new Date().getTime();\r\n       }\r\n    }\r\n\r\n    public doCurrentSelection(game: Game) {\r\n\r\n        //wait a bit to let users see what's happening\r\n        this.wait(1000);\r\n\r\n        if(this.userSelections.length > 0)\r\n        {\r\n            const currentSelection : UserSelection[] = this.userSelections[this.userSelections.length - 1];\r\n\r\n            for(let i = 0; i < currentSelection.length; i++)\r\n            {\r\n                const selection = currentSelection[i];\r\n                switch(selection.location)\r\n                {\r\n                    case Location.hand:\r\n                        let cards: Card[] = [];\r\n                        for (const card of this.hand)\r\n                        {\r\n                            if(selection.isValid(card) === true)\r\n                            {\r\n                                cards.push(card);\r\n                                if( cards.length === selection.count)\r\n                                {\r\n                                    //tell the game we choose these cards\r\n                                    if(game.onCardsSelected(this.index, cards) === true)\r\n                                        return;\r\n                                }\r\n                            }\r\n                        }\r\n                        //didn't find anything, send back a blank\r\n                        if(i == currentSelection.length - 1)\r\n                        {\r\n                            game.onCardsSelected(this.index, cards);\r\n                        }\r\n                        break;\r\n                    case Location.deck:\r\n                        break;\r\n\r\n                    case Location.shop:\r\n                        for(const card in game.shop)\r\n                        {\r\n                           let cards: Card[] = [];\r\n                           cards.push(game.shop[card][0]);\r\n\r\n                           if(game.onCardsSelected(this.index, cards) === true)\r\n                            return;\r\n                        }\r\n                        //somehow none of the cards in the shop worked, uh oh\r\n                        break;\r\n\r\n                    case Location.discard:\r\n                        //need to implement this if it's ever a thing\r\n                        break;\r\n                    \r\n                    case Location.inPlay:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { CardDefinition, CardType } from \"./card-definition\";\r\nimport { Game } from \"./game\";\r\nimport { Player } from \"./player\";\r\n\r\nexport abstract class TreasureCardDefinition extends CardDefinition {\r\n\r\n    coinValue : number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.coinValue = 0;\r\n        this.cardType = CardType.treasure;\r\n    }\r\n\r\n    getCoinValue() : number {\r\n\r\n        return this.coinValue;\r\n    }\r\n\r\n    //increase the player's coin value when the card is played\r\n    public execute(game: Game, player: Player) {\r\n        player.coins += this.getCoinValue();\r\n        game.finishExecution(this);\r\n    }\r\n}","import { CardDefinition, CardType } from \"./card-definition\";\r\n\r\nexport abstract class VictoryCardDefinition extends CardDefinition {\r\n\r\n    constructor() {\r\n        super();\r\n        this.cardType = CardType.victory;\r\n    }\r\n\r\n    abstract GetVictoryPoints() : number;\r\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { GameService } from './game.service';\nimport { Game } from '../../../Common/src/game';\nimport { Card } from '../../../Common/src/card';\nimport { CookieService } from 'ngx-cookie-service';\nimport { StatusService } from './status.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit{\n  title = 'Dominion';\n  game: Game;\n  viewedCard: Card;\n  viewedPile: Card[];\n\n  constructor(public gameService: GameService) {\n    this.viewedCard = undefined;\n    this.viewedPile = [];\n  }\n\n  ngOnInit() {\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.game = game;\n    });\n\n    this.gameService.onViewedCardChanged().subscribe((viewedCard: Card) => {\n      this.viewedCard = viewedCard;\n    });\n\n    this.gameService.onViewedPileChanged().subscribe((viewedPile: Card[]) => {\n      this.viewedPile = viewedPile;\n    });\n  }\n\n  onCloseSelected() {\n    this.gameService.setViewedCard(undefined);\n    this.gameService.setViewedPile([], '');\n  }\n}\n\n","<app-join-game *ngIf=\"game === undefined\"></app-join-game>\n<app-setup-game *ngIf=\"game != undefined && game.state === 'setup' \"></app-setup-game>\n<app-play-game *ngIf=\"game != undefined && game.state === 'play' \"></app-play-game>\n<app-game-over *ngIf=\"game != undefined && game.state === 'over' \"></app-game-over>\n\n<div id = \"viewedCard\" *ngIf = \"viewedCard != undefined\">\n    <div id = \"grayOut\">\n        <h1 id=\"close\" (click)=\"onCloseSelected()\">X</h1>\n        <app-card id = \"card\" [card] = \"viewedCard\" [selected]=\"false\" [orientation]=\"'bottom'\" [revealed]=\"true\"></app-card>\n    </div>\n</div>\n\n<div id = \"viewedPile\" *ngIf = \"viewedPile.length > 0\">\n    <div id = \"grayOut\">\n        <h1 id=\"close\" (click)=\"onCloseSelected()\">X</h1>\n        <div id=\"pileView\">\n            <app-card *ngFor=\"let pileCard of viewedPile\" id = \"pileCard\" [card] = \"pileCard\" [selected]=\"false\" [orientation]=\"'bottom'\" [revealed]=\"true\"></app-card>         \n        </div>\n        \n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\n\nimport { AppComponent } from './app.component';\n\nimport { CardComponent } from './card/card.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { JoinGameComponent } from './join-game/join-game.component';\nimport { PlayGameComponent } from './play-game/play-game.component';\nimport { BannerComponent } from './banner/banner.component';\n\n// angular material imports\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport {  MatMenuModule } from '@angular/material/menu';\nimport {  MatToolbarModule } from '@angular/material/toolbar';\nimport {  MatIconModule } from '@angular/material/icon';\nimport {  MatSidenavModule } from '@angular/material/sidenav';\nimport {  MatListModule } from '@angular/material/list';\nimport { SetupGameComponent } from './setup-game/setup-game.component';\nimport {MatSelectModule} from '@angular/material/select';\nimport { PlayerComponent } from './player/player.component';\nimport { CardPileComponent } from './card-pile/card-pile.component';\nimport { ShopComponent } from './shop/shop.component';\nimport { GameOverComponent } from './game-over/game-over.component';\nimport {CookieService } from 'ngx-cookie-service';\n\nconst config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };\n\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      CardComponent,\n      JoinGameComponent,\n      PlayGameComponent,\n      BannerComponent,\n      SetupGameComponent,\n      PlayerComponent,\n      CardPileComponent,\n      ShopComponent,\n      GameOverComponent\n   ],\n   imports: [\n      BrowserModule,\n      BrowserAnimationsModule,\n      HttpClientModule,\n      FormsModule,\n      SocketIoModule.forRoot(config),\n      MatButtonModule,\n      MatMenuModule,\n      MatCardModule,\n      MatToolbarModule,\n      MatIconModule,\n      MatSidenavModule,\n      MatListModule,\n      MatSelectModule\n   ],\n   providers: [ CookieService ],\n   bootstrap: [\n      AppComponent\n   ]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.css']\n})\nexport class BannerComponent implements OnInit {\n\n  imgSrc: string;\n  constructor() {\n    this.imgSrc = '/assets/dominion-banner.jfif';\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<img src=\"assets/dominion-banner.jfif\"/>","import { Component, OnInit, Input } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\n\n@Component({\n  selector: 'app-card-pile',\n  templateUrl: './card-pile.component.html',\n  styleUrls: ['./card-pile.component.css']\n})\nexport class CardPileComponent implements OnInit {\n\n  @Input() cards: Card[];\n  @Input() revealed: boolean; // can users see the cards in the pile? or should we show the card back?\n  @Input() orientation: string;\n  @Input() location = '';\n  @Input() showLocationLabel = false;\n\n  hovered: boolean;\n\n  constructor(private gameService: GameService) {\n    this.hovered = false;\n  }\n\n\n  ngOnInit() {\n  }\n\n  getImgSrc(): string {\n    let url = '/assets/card_images/';\n    url += this.orientation;\n    url += '/';\n    if (this.revealed === true)\n    {\n      url += this.cards[0].imageName;\n    }\n    else\n    {\n      url += 'Card_Back.jpg';\n    }\n    return url;\n  }\n\n  onClick() {\n    if (this.revealed === true)\n    {\n      this.gameService.setViewedPile(this.cards, this.location);\n    }\n  }\n\n}\n","<p id = \"title\" *ngIf=\"showLocationLabel === true\">{{location}}</p>\n<img  *ngIf=\"cards.length > 0\" \n[class.hovered]=\"hovered\"\n[ngClass]=\"{\n    'bottom': orientation==='bottom',\n    'left': orientation==='left',\n    'top': orientation==='top',\n    'right': orientation==='right'\n }\"  src = \"{{getImgSrc()}}\" (click)=\"onClick()\">\n\n \n<div id = \"hoverArea\" (mouseenter)=\"hovered = true\" (mouseleave)=\"hovered = false\" (click)=\"onClick()\"></div>\n\n<p id = \"count\" *ngIf=\"cards.length > 0\">{{cards.length}}</p>","import { Component, OnInit, Input, HostBinding, HostListener } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n})\n\nexport class CardComponent implements OnInit {\n\n  @Input() card: Card;\n  @Input() selected = false;\n  @Input() highlighted = false;\n  @Input() orientation: string;\n  @Input() revealed: boolean;\n\n  hovered: boolean;\n\n\n  constructor(private gameService: GameService) {\n    this.hovered = false;\n   }\n\n  ngOnInit() {\n  }\n\n  getImgSrc(): string {\n    let url = '/assets/card_images/';\n    url += this.orientation;\n    url += '/';\n    if (this.revealed === true)\n    {\n      url += this.card.imageName;\n    }\n    else\n    {\n      url += 'Card_Back.jpg';\n    }\n    return url;\n  }\n\n  onClick() {\n    this.gameService.onCardSelected(this.card);\n  }\n\n  onView() {\n    this.gameService.setViewedCard(this.card);\n  }\n}\n","\r\n<img src=\"{{getImgSrc()}}\" [class.hovered]=\"hovered\" [class.selected]=\"selected\" [class.unselected]=\"!selected\" [class.highlighted]=\"highlighted\" (click)=\"onClick()\" [ngClass]=\"{\r\n    'bottom': orientation==='bottom',\r\n    'left': orientation==='left',\r\n    'top': orientation==='top',\r\n    'right': orientation==='right'\r\n}\" >\r\n\r\n<div id = \"hoverArea\" (mouseenter)=\"hovered = true\" (mouseleave)=\"hovered = false\" (click)=\"onClick()\"></div>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Game } from '../../../../Common/src/game';\nimport { GameService } from '../game.service';\nimport { CardLibrary } from '../../../../Common/src/card-library';\nimport { Player } from '../../../../Common/src/player';\nimport { CardType } from '../../../../Common/src/card-definition';\nimport { VictoryCardDefinition } from '../../../../Common/src/victory-card-definition';\n\n@Component({\n  selector: 'app-game-over',\n  templateUrl: './game-over.component.html',\n  styleUrls: ['./game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n\n  orderedPlayers: [string, number][];\n  winner: string;\n\n  constructor(private gameService: GameService) {\n    this.orderedPlayers = [];\n    this.winner = '';\n  }\n\n  ngOnInit() {\n    const game: Game = this.gameService.getGame();\n\n    // calculate victory points for each player, and put them in order by amount of points\n    const cardLibrary: CardLibrary = new CardLibrary();\n\n    for (const player of game.players)\n    {\n      let playerPoints = 0;\n      for (const card of player.deck)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.revealed)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.hand)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.inPlay)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n      for (const card of player.discard)\n      {\n        if (card.type === CardType.victory)\n        {\n          const victoryCardDefinition: VictoryCardDefinition = cardLibrary.getCardDefinition(card.name) as VictoryCardDefinition;\n          playerPoints += victoryCardDefinition.GetVictoryPoints();\n          console.log('counting points: ' + card.name + ': ' + victoryCardDefinition.GetVictoryPoints());\n        }\n      }\n\n      let inserted = false;\n      for (let i = 0; i <= this.orderedPlayers.length && inserted === false; i++)\n      {\n        if (i === this.orderedPlayers.length)\n        {\n          this.orderedPlayers.push([player.name, playerPoints]);\n          inserted = true;\n        }\n        else if (playerPoints > this.orderedPlayers[i][1])\n        {\n          this.orderedPlayers.splice(i, 0, [player.name, playerPoints]);\n          inserted = true;\n        }\n      }\n    }\n    // check for tie\n    if (this.orderedPlayers.length >= 2 && this.orderedPlayers[0][1] === this.orderedPlayers[1][1])\n    {\n      this.winner = 'It\\'s a tie between (';\n      for (const player of this.orderedPlayers)\n      {\n        if (player[1] === this.orderedPlayers[0][1])\n        {\n          this.winner +=  ' ' + player[0];\n        }\n      }\n      this.winner += ' )!';\n    }\n    else\n    {\n      this.winner = this.orderedPlayers[0][0] + ' wins!';\n    }\n  }\n\n  onLeaveGame() {\n    this.gameService.leaveGame();\n  }\n\n}\n","<app-banner></app-banner>\n\n<br>\n<mat-divider></mat-divider>\n<br>\n\n<mat-card id=\"content\">\n<mat-card-title>{{winner}}</mat-card-title>\n<mat-card-content>\n\n  <h1>Results</h1>\n  <table>\n    <th>Player</th><th>Victory Points</th>\n    <tr *ngFor=\"let player of orderedPlayers\"><td>{{player[0]}}</td><td>{{player[1]}}</td></tr>\n  </table>\n  <button mat-button color=\"primary\" (click)=\"onLeaveGame()\">Leave Game</button>\n</mat-card-content>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable, Subject } from 'rxjs';\nimport { Game, GameState } from '../../../Common/src/game';\nimport { Player, PlayerState, Location } from '../../../Common/src/player';\nimport { StatusService } from './status.service';\nimport { Card } from '../../../Common/src/card';\nimport { CardType } from '../../../Common/src/card-definition';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  private player: Player;\n  private game: Game;\n  private gameSubject: Subject<Game>;\n\n  private viewedCard: Card;\n  private viewedCardSubject: Subject<Card>;\n\n  private viewedPile: Card[];\n  private viewedPileSubject: Subject<Card[]>;\n\n  private selectedCards: Card[];\n\n  constructor(private socket: Socket, private statusService: StatusService) {\n    this.gameSubject = new Subject<Game>();\n    this.viewedCardSubject = new Subject<Card>();\n    this.selectedCards = [];\n    this.viewedPile = [];\n    this.viewedPileSubject = new Subject<Card[]>();\n\n    this.socket.on('game-updated', (game: Game) => {\n        if (this.game !== undefined)\n        {\n          this.game = game;\n          this.player = game.players[this.player.index];\n          this.gameSubject.next(this.game);\n\n          console.log(this.player);\n          this.statusService.updateStatus(this.game);\n        }\n    });\n  }\n\n  public getPlayer(): Player {\n    return this.player;\n  }\n\n  // server communication through socket io\n\n  public sendToServer(event: string, data: any, returnCallback: (returnValue: any) => void): any{\n        console.log('emiting: ' + event);\n        this.socket.emit(event, data, (result: {ok: boolean, error: string, returnValue, any }) => {\n        if (result.ok === true)\n        {\n          returnCallback(result.returnValue);\n        }\n        else\n        {\n          this.statusService.setStatus(result.error);\n          console.log('error sending: ' + event + '. reason: ' + result.error);\n        }\n\n        return result.returnValue;\n      } );\n  }\n\n  public joinGame(myPlayerName: string, myPlayerColor: string, myGameName: string)\n  {\n    this.sendToServer('join-game', { playerName: myPlayerName, playerColor: myPlayerColor, gameName: myGameName }, (returnValue: any) => {\n      this.player = returnValue.player;\n      this.game = returnValue.game;\n      this.gameSubject.next(this.game);\n    });\n  }\n\n  public createGame(newPlayerName: string, newPlayerColor: string, newGameName: string)\n  {\n    // create the game, and join it if it's created successfully\n    this.sendToServer('create-game', newGameName, () => {\n      this.joinGame(newPlayerName, newPlayerColor, newGameName);\n    });\n  }\n\n  public leaveGame()\n  {\n    this.sendToServer('leave-game', {gameName: this.game.name, playerIndex: this.player.index}, () => {});\n  }\n\n  public addBot(myBotName: string)\n  {\n    console.log(this.game);\n    this.sendToServer('add-bot', { gameName: this.game.name, botName: myBotName}, () => {\n    });\n  }\n\n  public requestGames()\n  {\n    this.sendToServer('request-games-list', {}, () => {});\n  }\n\n  public setupSelectCard(card: Card)\n  {\n    this.sendToServer('setup-card-selected', {\n      gameName: this.game.name,\n      cardName: card.name\n    }, () => {});\n  }\n\n  public setupSelectPreset(selectedPreset: string)\n  {\n    this.sendToServer('setup-preset-selected', {\n      gameName: this.game.name,\n      presetName: selectedPreset\n    }, () => {});\n  }\n\n  public setupReady() {\n    this.sendToServer('setup-player-ready', {\n      gameName: this.game.name,\n      playerName: this.player.name\n    }, () => {});\n  }\n\n  public setupStartGame() {\n    this.sendToServer('setup-start-game', {\n      gameName: this.game.name\n    }, () => {});\n  }\n\n\n  public getGame(): Game {\n    return this.game;\n  }\n\n  public onGameChanged = () => {\n    return this.gameSubject.asObservable();\n  }\n\n  public onGamesUpdated = () => {\n    return Observable.create((observer) => {\n      this.socket.on('games-updated', (games: Game[]) => {\n        if (this.game !== undefined)\n        {\n          let bFound = false;\n          for (const game of games)\n          {\n            if (game.name === this.game.name)\n            {\n              bFound = true;\n              if (game.players. length > this.player.index && game.players[this.player.index].name === this.player.name)\n              {\n                console.log('updated game');\n                this.game = game;\n                this.gameSubject.next(this.game);\n              }\n              else\n              {\n                console.log('we left the game');\n                // we aren't in the game anymore, clear out\n                this.game = undefined;\n                this.player = undefined;\n                this.gameSubject.next(this.game);\n              }\n            }\n          }\n          if (bFound === false)\n          {\n            console.log('we left the game');\n            // we aren't in the game anymore, clear out\n            this.game = undefined;\n            this.player = undefined;\n            this.gameSubject.next(this.game);\n          }\n        }\n        observer.next(games);\n      });\n    });\n  }\n\n  public onPromptClicked(clickedPrompt: string){\n    this.sendToServer('prompt-clicked', {\n      gameName: this.game.name,\n      playerIndex: this.player.index,\n      prompt: clickedPrompt,\n      cards: this.selectedCards\n    }, () => {});\n    this.selectedCards = [];\n  }\n\n  public onCardSelected(card: Card) {\n\n    // card selected for setup\n    if (this.game.state === GameState.Setup)\n    {\n      this.setupSelectCard(card);\n      return;\n    }\n\n    // card selected in game\n    // if the card is already selected, remove it from the selection\n    for (let i = 0; i < this.selectedCards.length; i++)\n    {\n      const selectedCard = this.selectedCards[i];\n      if (selectedCard.id === card.id)\n      {\n        this.selectedCards.splice(i, 1);\n        return;\n      }\n    }\n    this.selectedCards.push(card);\n    const count = this.player.userSelections[this.player.userSelections.length - 1][0].count;\n    if (this.selectedCards.length >= count && count !== -1)\n    {\n      this.sendToServer('cards-selected',\n      {\n        gameName: this.game.name,\n        playerIndex: this.player.index,\n        cards: this.selectedCards\n      }, () => {});\n      this.selectedCards = [];\n    }\n  }\n\n  public isCardSelected(card: Card): boolean {\n    for (const selectedCard of this.selectedCards)\n    {\n      if (selectedCard.id === card.id)\n      {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public isCardHighlighted(card: Card): boolean {\n    if (this.player.state === PlayerState.Action)\n    {\n      if (card.type === CardType.action && this.player.actions > 0)\n      {\n        return true;\n      }\n    }\n    else if (this.player.state === PlayerState.Buy)\n    {\n      if (card.type === CardType.treasure)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public setViewedCard(card: Card) {\n    this.viewedCard = card;\n    this.viewedPile = [];\n    this.viewedCardSubject.next(this.viewedCard);\n  }\n\n  public onViewedCardChanged = () => {\n    return this.viewedCardSubject.asObservable();\n  }\n\n  public setViewedPile(cards: Card[], location: string)\n  {\n    // you can only view a a pile when clicking the shop piles doesn't buy/gain something\n    let pickingFromShop = false;\n    if (this.player.userSelections.length > 0)\n    {\n      for (const selection of this.player.userSelections[this.player.userSelections.length - 1])\n      {\n        if (selection.location === Location.shop)\n        {\n          pickingFromShop = true;\n        }\n      }\n    }\n\n    if (location !== 'Shop' || !pickingFromShop)\n    {\n      this.viewedCard = undefined;\n      this.viewedPile = cards;\n      this.viewedPileSubject.next(this.viewedPile);\n    }\n  }\n\n  public onViewedPileChanged = () => {\n    return this.viewedPileSubject.asObservable();\n  }\n}\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { GameService } from '../game.service';\nimport { Game } from '../../../../Common/src/game';\nimport { StatusService } from '../status.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-join-game',\n  templateUrl: './join-game.component.html',\n  styleUrls: ['./join-game.component.css']\n})\nexport class JoinGameComponent implements OnInit {\n\n  gameNames: string[];\n  playerCounts: number[];\n  newGameName: string;\n  playerName: string;\n  playerColor: string;\n\n  status: string;\n\n  constructor(private gameService: GameService, private statusService: StatusService, private cookieService: CookieService) {\n    this.gameNames = [];\n    this.playerCounts = [];\n    this.newGameName = '';\n    this.playerName = this.cookieService.get('player-name');\n    this.playerColor = '#000000';\n    this.status = '';\n  }\n\n  ngOnInit() {\n    // listen for the list of games being updated\n    this.gameService\n    .onGamesUpdated()\n    .subscribe((games: Game[]) => {\n      this.gameNames = [];\n      this.playerCounts = [];\n      for (const game of games)\n      {\n        this.gameNames.push(game.name);\n        this.playerCounts.push(game.players.length);\n      }\n    });\n\n    this.statusService.onStatusChanged().subscribe((newStatus: string) => {\n      this.status = newStatus;\n    });\n\n    this.gameService.requestGames();\n  }\n\n  onJoin(gameName: string)\n  {\n    if (this.playerName !== '')\n    {\n      this.cookieService.set('player-name', this.playerName);\n      this.gameService.joinGame(this.playerName, this.playerColor, gameName);\n    }\n    else\n    {\n      this.statusService.setStatus('Please enter a player name');\n    }\n  }\n\n  onCreate()\n  {\n    if (this.playerName === '' && this.newGameName === '')\n    {\n      this.statusService.setStatus('Please enter a game and player name');\n    }\n    else if (this.playerName === '')\n    {\n      this.statusService.setStatus('Please enter a player name');\n    }\n    else if (this.newGameName === '')\n    {\n      this.statusService.setStatus('Please enter a game name');\n    }\n    else\n    {\n      this.cookieService.set('player-name', this.playerName);\n      this.gameService.createGame(this.playerName, this.playerColor, this.newGameName);\n      this.newGameName = '';\n    }\n  }\n\n}\n","<app-banner></app-banner>\n\n<br>\n<mat-divider></mat-divider>\n<br>\n<div id = \"status\" *ngIf=\"status !== ''\">\n  {{status}}\n  <br>\n  <mat-divider></mat-divider>\n  <br>\n</div>\n\n<mat-card id=\"content\">\n<mat-card-title>Create/Join Game</mat-card-title>\n<mat-card-content>\n  Name: <input  [(ngModel)]=\"playerName\"  type = \"text\" placeholder=\"\"/><br>\n  Favorite Color: <input [(ngModel)]=\"playerColor\" type=\"color\"/>\n  <br>\n\n  <h1>Games</h1>\n  <table>\n    <th>Game</th><th>Player Count</th><th></th>\n    <tr *ngFor=\"let gameName of gameNames; let i = index\"><td>{{gameName}}</td><td>{{playerCounts[i]}}/4</td><td><button mat-button color=\"primary\"(click)=\"onJoin(gameName)\">Join</button></td></tr>\n  </table>\n  <br>\n  <h1> Create New Game</h1>\n  <input  [(ngModel)]=\"newGameName\"  type = \"text\" placeholder=\"\"/>\n  <button mat-button color=\"primary\" (click)=\"onCreate()\">Create</button>\n</mat-card-content>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { GameService } from '../game.service';\nimport { Game, GameState } from '../../../../Common/src/game';\nimport { Player, PlayerState } from '../../../../Common/src/player';\nimport { StatusService } from '../status.service';\nimport { Action } from 'rxjs/internal/scheduler/Action';\nimport { CardType } from '../../../../Common/src/card-definition';\n\n@Component({\n  selector: 'app-play-game',\n  templateUrl: './play-game.component.html',\n  styleUrls: ['./play-game.component.css']\n})\nexport class PlayGameComponent implements OnInit {\n\n  game: Game;\n  myPlayer: Player;\n  leftPlayer: Player;\n  topPlayer: Player;\n  rightPlayer: Player;\n  status: string;\n\n  constructor(private gameService: GameService, private statusService: StatusService) {\n    this.game = gameService.getGame();\n    this.myPlayer = gameService.getPlayer();\n    this.initPlayers();\n    this.status = statusService.getStatus();\n  }\n\n  ngOnInit() {\n    this.statusService.onStatusChanged().subscribe((newStatus: string) => {\n      this.status = newStatus;\n    });\n\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.game = game;\n\n      this.initPlayers();\n    });\n  }\n\n  getStatus(): string {\n    if (this.myPlayer.status !== '')\n    {\n      return this.myPlayer.status;\n    }\n    else{\n      return this.status;\n    }\n  }\n\n  onPromptClicked(prompt: string) {\n    this.gameService.onPromptClicked(prompt);\n  }\n\n  isPromptHighlighted(prompt: string): boolean {\n    if (prompt === 'done')\n    {\n      if (this.myPlayer.state === PlayerState.Action)\n      {\n        let anyActions = false;\n        for (const card of this.myPlayer.hand)\n        {\n          if (card.type === CardType.action)\n          {\n            anyActions = true;\n          }\n        }\n\n        if (this.myPlayer.actions === 0 || anyActions === false)\n        {\n          return true;\n        }\n      }\n      else if (this.myPlayer.state === PlayerState.Buy && this.myPlayer.buys === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n\n  }\n\n  initPlayers() {\n    if (this.game !== undefined)\n    {\n      this.myPlayer = this.game.players[this.myPlayer.index];\n\n      if (this.game.players.length === 2)\n      {\n        this.topPlayer = this.game.players[((this.myPlayer.index + 1) % 2)];\n      }\n      else if (this.game.players.length === 3)\n      {\n        this.leftPlayer = this.game.players[((this.myPlayer.index + 1) % 3)];\n        this.topPlayer = this.game.players[((this.myPlayer.index + 2) % 3)];\n      }\n      else if (this.game.players.length === 4)\n      {\n        this.leftPlayer = this.game.players[((this.myPlayer.index + 1) % 4)];\n        this.topPlayer = this.game.players[((this.myPlayer.index + 2) % 4)];\n        this.rightPlayer = this.game.players[((this.myPlayer.index + 3) % 4)];\n      }\n    }\n  }\n\n}\n","\r\n<div id = \"status\">\r\n    {{getStatus()}}\r\n    <button mat-button *ngFor=\"let prompt of myPlayer.userPrompts[myPlayer.userPrompts.length-1]\" [class.highlighted]=\"isPromptHighlighted(prompt) === true\" (click)=\"onPromptClicked(prompt)\">{{prompt}}</button>\r\n    <mat-divider></mat-divider>\r\n</div>\r\n\r\n<div id=\"game\">\r\n    <!-- Player areas on each side of the screen-->\r\n    <app-player id=\"leftPlayer\" *ngIf=\"leftPlayer !== undefined\" [player]=\"leftPlayer\" [orientation]=\"'left'\"></app-player>\r\n    <app-player id=\"topPlayer\" *ngIf=\"topPlayer !== undefined\" [player]=\"topPlayer\" [orientation]=\"'top'\"></app-player>\r\n    <app-player id=\"rightPlayer\" *ngIf=\"rightPlayer !== undefined\" [player]=\"rightPlayer\" [orientation]=\"'right'\"></app-player>\r\n\r\n    <!-- your player on bottom-->\r\n    <app-player id=\"myPlayer\" [player]=\"myPlayer\" [orientation]=\"'bottom'\"></app-player>\r\n\r\n    <!-- Shop in the middle -->\r\n    <app-shop id = \"shop\" ></app-shop>\r\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Player } from '../../../../Common/src/player';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.css']\n})\nexport class PlayerComponent implements OnInit {\n\n  @Input() player: Player;\n  @Input() orientation: string;\n\n  constructor(private gameService: GameService) { }\n\n  ngOnInit() {\n  }\n\n  isCardSelected(card: Card): boolean {\n    return this.gameService.isCardSelected(card) === true;\n  }\n\n  isCardHighlighted(card: Card): boolean {\n    return this.gameService.isCardHighlighted(card) === true;\n  }\n}\n","\n<div id=\"bottomPlayer\" *ngIf = \"orientation === 'bottom'\">\n    <div id= \"bottomPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n    <app-card-pile id=\"bottomPlayerDeck\" [cards]=\"player.deck\" [location]=\"'Deck'\" [showLocationLabel]=\"true\" [revealed] = \"false\" [orientation] =\"'bottom'\"></app-card-pile>\n    <app-card-pile id=\"bottomPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n    <div id =\"bottomPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\"  [highlighted]=\"isCardHighlighted(card) === true && isCardSelected(card) === false\" [selected]=\"isCardSelected(card) === true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card>\n    </div>\n    <app-card-pile id=\"bottomPlayerInPlay\" [cards]=\"player.inPlay\" [location]=\"'In Play'\" [showLocationLabel]=\"true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n    <app-card-pile id=\"bottomPlayerDiscard\" [cards]=\"player.discard\" [location]=\"'Discard'\" [showLocationLabel]=\"true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n</div>\n\n<div id=\"leftPlayer\" *ngIf = \"orientation === 'left'\">\n    <div id= \"leftPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n    <app-card-pile id=\"leftPlayerDeck\" [cards]=\"player.deck\" [revealed] = \"false\" [orientation] =\"'left'\"></app-card-pile>\n    <app-card-pile id=\"leftPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'left'\"></app-card-pile>\n    <div id =\"leftPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\" [revealed] = \"card.revealedToOthers\" [orientation]=\"'left'\"></app-card>\n    </div>\n    <app-card-pile id=\"leftPlayerInPlay\" [cards]=\"player.inPlay\" [revealed] = \"true\" [orientation] =\"'left'\"></app-card-pile>\n    <app-card-pile id=\"leftPlayerDiscard\" [cards]=\"player.discard\" [revealed] = \"true\" [orientation] =\"'left'\"></app-card-pile>\n</div>\n\n<div id=\"topPlayer\" *ngIf = \"orientation === 'top'\">\n    <app-card-pile id=\"topPlayerDiscard\" [cards]=\"player.discard\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <app-card-pile id=\"topPlayerInPlay\" [cards]=\"player.inPlay\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <div id =\"topPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\" [revealed] = \"card.revealedToOthers\" [orientation]=\"'top'\"></app-card>\n    </div>\n    <app-card-pile id=\"topPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <app-card-pile id=\"topPlayerDeck\" [cards]=\"player.deck\" [revealed] = \"false\" [orientation] =\"'top'\"></app-card-pile>\n    <div id= \"topPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n</div>\n\n<div id=\"rightPlayer\" *ngIf = \"orientation === 'right'\">\n    <app-card-pile id=\"rightPlayerDiscard\" [cards]=\"player.discard\" [revealed] = \"true\" [orientation] =\"'right'\"></app-card-pile>\n    <app-card-pile id=\"rightPlayerInPlay\" [cards]=\"player.inPlay\" [revealed] = \"true\" [orientation] =\"'right'\"></app-card-pile>\n    <div id =\"rightPlayerHand\">\n        <app-card *ngFor=\"let card of player.hand\" [card]=\"card\" [revealed] = \"card.revealedToOthers\" [orientation]=\"'right'\"></app-card>\n    </div>\n    <app-card-pile id=\"rightPlayerRevealed\" [cards]=\"player.revealed\" [revealed] = \"true\" [orientation] =\"'top'\"></app-card-pile>\n    <app-card-pile id=\"rightPlayerDeck\" [cards]=\"player.deck\" [revealed] = \"false\" [orientation] =\"'right'\"></app-card-pile>\n    <div id= \"rightPlayerInfo\" [style.background]=\"player.color\">\n        <div id = \"playerInfoText\">\n            {{player.name}}<br>\n            Actions: {{player.actions}}<br>\n            Buys: {{player.buys}}<br>\n            Coins: {{player.coins}}<br>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { CardLibrary } from '../../../../Common/src/card-library';\nimport { GameService } from '../game.service';\nimport { Game, GameState } from '../../../../Common/src/game';\n\n@Component({\n  selector: 'app-setup-game',\n  templateUrl: './setup-game.component.html',\n  styleUrls: ['./setup-game.component.css']\n})\nexport class SetupGameComponent implements OnInit {\n\n  selectedCard: Card;\n  basicCards: Card[];\n  kingdomCards: Card[];\n  library: CardLibrary;\n  game: Game;\n  presets: string[];\n  selectedPreset: string;\n\n  constructor(private gameService: GameService) { }\n\n  ngOnInit() {\n    this.library = this.library = new CardLibrary();\n    this.basicCards = [];\n    this.kingdomCards = [];\n    this.getCards();\n\n    this.presets = this.library.getPresetNames();\n    this.game = this.gameService.getGame();\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.game = game;\n      if (this.game !== undefined)\n      {\n        this.selectedPreset = this.game.setupPreset;\n      }\n    });\n  }\n\n  getCards(): void {\n    const cards: Card[] = this.library.getAllCards();\n\n    for (const card of cards)\n    {\n        if (card.isKingdom === true)\n        {\n          this.kingdomCards.push(card);\n        }\n        else\n        {\n          this.basicCards.push(card);\n        }\n    }\n  }\n\n  selectPreset() {\n    this.gameService.setupSelectPreset(this.selectedPreset);\n  }\n\n  onReady() {\n    this.gameService.setupReady();\n  }\n\n  onStart() {\n    this.gameService.setupStartGame();\n  }\n\n  // if you want to start a game, everyone needs to be ready, and you need 10 cards selected\n  canStart(): boolean{\n    let canStart = true;\n\n    for (const player of this.game.players)\n    {\n      if (!player.setupReady)\n      {\n        canStart = false;\n      }\n    }\n\n    if (this.game.setupSelectedCards.length !== 10)\n    {\n      canStart = false;\n    }\n    return canStart;\n  }\n}\n","<div id=\"playerList\">\n  <mat-card-title>Players</mat-card-title>\n  <table id = \"playerTable\">\n    <th>Player</th><th>Ready</th>\n    <tr *ngFor=\"let player of game.players\">\n        <td>\n          <!-- this cell has a nested table to make these items display next to ech other (yuck) -->\n          <table id=\"nestedTable\">\n            <tr>\n              <td>{{player.name}}</td> \n              <td><div class=\"colorBox\" [style.background]=\"player.color\"></div></td>\n            </tr>\n          </table>\n        </td>\n        <td style = \"color: green;\"*ngIf=\"player.setupReady === true\">&#10003;</td><td style = \"color: red;\" *ngIf=\"player.setupReady === false\">X</td>\n    </tr>\n  </table>\n  <button mat-button color=\"primary\" (click)=\"onReady()\">Ready</button>\n  <button mat-button color=\"primary\" (click)=\"onStart()\" [disabled]=\"!canStart()\">Start</button>\n</div>\n\n<mat-card class=\"content\" id=\"basicCardContainer\">\n  <mat-card-title>Basic Cards</mat-card-title>\n  <mat-card-content>\n      <div id = \"basicCards\">\n        <app-card  *ngFor =\"let card of basicCards\" [card]=\"card\" [selected]=\"card === selectedCard\" [revealed]=\"true\" [orientation]=\"'bottom'\"></app-card>\n      </div>\n  </mat-card-content>\n</mat-card>\n\n<br>\n\n<mat-card class=\"content\" id=\"kingdomCardContainer\">\n  <mat-card-title>Kingdom Cards</mat-card-title>\n  <mat-card-content>\n    <div id = \"presets\">\n      <mat-form-field id = \"presets\">\n        <mat-label>Reccomended Sets</mat-label>\n        <mat-select [(value)]=\"selectedPreset\" (selectionChange)=\"selectPreset()\">\n          <mat-option *ngFor=\"let preset of presets\" [value]=\"preset\">\n            {{preset}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div id = \"kingdomCards\">\n      <app-card  *ngFor =\"let card of kingdomCards\" [card]=\"card\" [selected]=\"game.setupSelectedCards.indexOf(card.name) >= 0\" [revealed]=\"true\" [orientation]=\"'bottom'\"></app-card>\n    </div>\n  </mat-card-content>\n</mat-card>","import { Component, OnInit, Input } from '@angular/core';\nimport { Card } from '../../../../Common/src/card';\nimport { GameService } from '../game.service';\nimport { Game } from '../../../../Common/src/game';\n\n@Component({\n  selector: 'app-shop',\n  templateUrl: './shop.component.html',\n  styleUrls: ['./shop.component.css']\n})\nexport class ShopComponent implements OnInit {\n\n  shop: Record<string, Card[]>;\n  basicCards: Card[][];\n  kingdomCards: Card[][];\n  trash: Card[];\n\n  constructor(private gameService: GameService) {\n    this.basicCards = [];\n    this.kingdomCards = [];\n  }\n\n  ngOnInit() {\n\n    this.shop = this.gameService.getGame().shop;\n    this.trash = this.gameService.getGame().trash;\n    this.initShopPiles();\n\n    this.gameService.onGameChanged().subscribe((game: Game) => {\n      this.shop = game.shop;\n      this.trash = game.trash;\n      this.initShopPiles();\n    });\n  }\n\n  initShopPiles()\n  {\n    this.basicCards = [];\n    this.kingdomCards = [];\n\n    for (const item in this.shop) {\n      if (this.shop[item][0].isKingdom)\n      {\n        this.kingdomCards.push(this.shop[item]);\n      }\n      else\n      {\n        this.basicCards.push(this.shop[item]);\n      }\n    }\n  }\n\n  onPileClicked(cards: Card[]) {\n    this.gameService.onCardSelected(cards[0]);\n  }\n\n}\n","<div id= \"title\">\n  Shop<br>\n  <mat-divider></mat-divider>\n</div>\n<div id=\"container\">\n  <div id=\"basicCards\">\n    <app-card-pile *ngFor = \"let item of basicCards\" [location]=\"'Shop'\" [cards]=\"item\" [revealed] = \"true\" [orientation] =\"'bottom'\" (click)=\"onPileClicked(item)\"></app-card-pile>\n    <app-card-pile [cards]=\"trash\" [location]=\"'Trash'\" [showLocationLabel]=\"true\" [revealed] = \"true\" [orientation] =\"'bottom'\"></app-card-pile>\n  </div>\n  <div id=\"kingdomCards\">\n    <app-card-pile *ngFor = \"let item of kingdomCards\" [cards]=\"item\" [location]=\"'Shop'\" [revealed] = \"true\" [orientation] =\"'bottom'\" (click)=\"onPileClicked(item)\"></app-card-pile>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Game } from '../../../Common/src/game';\nimport { Player } from '../../../Common/src/player';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusService {\n\n  private status: string;\n  private statusSubject: Subject<string>;\n\n  constructor() {\n    status = '';\n    this.statusSubject = new Subject<string>();\n  }\n\n  public onStatusChanged = () => {\n    return this.statusSubject.asObservable();\n  }\n\n  public setStatus(newStatus: string) {\n    this.status = newStatus;\n    this.statusSubject.next(this.status);\n  }\n\n  public getStatus(): string {\n    return this.status;\n  }\n\n  public updateStatus(game: Game)\n  {\n    let status = '';\n    const currentPlayer: Player = game.players[game.currentPlayer];\n    if (currentPlayer !== undefined)\n    {\n      status += currentPlayer.name + '\\'s turn. ';\n      status += currentPlayer.state + ' phase';\n      this.setStatus(status);\n    }\n    else\n    {\n      this.setStatus('setting up game');\n    }\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"],"sourceRoot":"webpack:///"}